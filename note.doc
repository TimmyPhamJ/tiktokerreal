const { useBabelRc } = require("customize-cra")

1. cài đặt customize-cra
npm i customize-cra react-app-rewired -D
đổi trong package.json
/*
"scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",
    "eject": "react-app-rewired eject"
  },
*/
2. Tạo file config-overrides.js ngoài dự án gốc copy đoạn dưới vào file.

/* config-overrides.js 
module.exports = function override(config, env) {
    //do stuff with the webpack config...
    return config;
};
*/
_________________________
3. Cài đặt babel-plugin-module-resolver: npm install --save-dev babel-plugin-module-resolver
Tạo 1 file .babelrc tại thư mục gốc
/*
{
  "plugins": [
    [
      "module-resolver",
      {
        "alias": {
          "~": "./src"
        }
      }
    ]
  ]
}

 */

 4. Taoj 1 file jsconfig.json có nội dung:
 /*
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["src/*"]
    }
  }
}

 */

5. tìm customize-cra babel sau đó tìm tới tab useBabelRc. sau đó vào file config-overrides.js làm theo cú pháp sau:
/*
const { override,useBabelRc } = require("customize-cra");

module.exports = override(
    useBabelRc()
);
 */
 ______________________________
 CÀI ĐẶT VÀ CẤU HÌNH PRETTIER: Giúp format các file code HTML,CSS,JS,...giúp code trở nên gọn gàn hơn và ngay ngắn hơn 
 1. thêm 1 file cấu hình .prettierrc  vào thu mục gốc:
 /*
{
    "arrowParens": "always",
    "bracketSameLine": false,
    "bracketSpacing": true,
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "css",
    "insertPragma": false,
    "jsxSingleQuote": false,
    "printWidth": 120,
    "proseWrap": "preserve",
    "quoteProps": "as-needed",
    "requirePragma": false,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 4,
    "trailingComma": "all",
    "useTabs": false,
    "vueIndentScriptAndStyle": false
}
 */
 2. tạo file .vscode/settings.json
 /*
 {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
}
 */
 ______________________________
 CẤU HÌNH VÀ SỬ DỤNG CSS/SASS

 1. Tạo GlobalStyle component
 tạo file index. js và GlobalStyle.scss
 sau do import GlobalStyle vào file index.js ngoài src và app = <GlobalStyle> </GlobalStyle> bằng cách bôi den APP ctrl + p chọn wrap enter rồi nhạp then GlobalStyle và enter là ok 

 2. Cài thư viện SASS: 'npm i -D sass'

 3. Reset CSS
 dùng thư viện reset css normalize npm trên google
 "npm install --save normalize.css"

 4. Default CSS: font-family, font-size,line-height

 BỔ SUNG THUỘC TÍNH CSS

 1. Mở file GlobalStyle lên. Thêm * {box-sizing = border-box} 
 
 _________________________________

 CẤU HÌNH ROUTER/LAYOUT CHO DỰ ÁN

  1. Phân tịch tổng quan LAYOUT



  2. Cài đặt React-router-dom: npm i react-router-dom



  3. Đưa cấu hình router ra ngoài
import {BrowserRouter as Router} from 'react-router-dom'; vào file App.js. add trang home và following vào
/*
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from '~/pages/Home';
import Following from '~/pages/Following';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/following" element={<Following />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;
*/

taọ thư mục routers có index.js:
/*
const publicRoutes =[
dùng cho những router không cần đăng nhập vẫn xem được
]

const privateRoutes =[
    phải đang nhập mới xem được nếu không đăng nhập sẽ lái sang trang login
]

export{publicRoutes,privateRoutes}
*/

Chuyển import hom và foloowing sang traing index.js của routes sau đó làm như sau:

*/

taọ thư mục routers có index.js:
/*
import Home from '~/pages/Home';
import Following from '~/pages/Following';

const publicRoutes = [
  { path: '/', component: Home },
  { path: '/following', component: Following },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };

*/

chuyển sang trang App.js đổi lại như sau:

/*
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route) => {
            return <Route />;
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

*/

Sau này nếu có thêm 1 trang khác vào thì vào pages tạo thêm 1 trang. sau đó vào routes nạp trang mới vào 

  4. Xây dựng cơ chế tải layout 

  tại thư mục component tạo 1 thư mục tên là Layout tạo trong thư mục Layout 1 thư mục khác là DefaultLayout và trong thư mục đó tạo 1 index.js. 
  Thư mục Layout này sau này có thể thêm các layout khác thì chứa chung với thư mục default. 
  Trong defaultlayout thì chỉ thiết kế các nội dung đứng yên và khoogn di chuyển dù là có chuyển trang gọi là layout cố định.
  Tại DefaultLayout tạo thư mục Header và thêm 1 file index.js trong đó sau đó nhân lên các mục cần làm như header, sidebar, footer,...
  tại index.js của defaultlayout import ra:
  /*
  import Header from './Header';
import Sidebar from './Sidebar';

function DefaultLayout({ children }) {
  return (
    <div>
      <Header />
      <div className="container">
        <Sidebar />
        <div className="content">{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;
  */

  tại thư mục layout tạo 1 file index.js

  /*
export {default as DefaultLayout} form './DefaultLayout'
  */

  sang file APP.js import layout vào:
  /*
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';
import { DefaultLayout } from '~/components/Layout';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route, index) => {
            const Layout = route.layout || DefaultLayout;
            const Page = route.component;
            return (
              <Route
                key={index}
                path={route.path}
                element={
                  <Layout>
                    <Page />
                  </Layout>
                }
              />
            );
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

  */

nếu tại index.js của route mà không chỉ định layout:
/*
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';

const publicRoutes = [
  { path: '/', component: Home }, mạc định là DefaultLayout
  { path: '/following', component: Following }, mạc định là DefaultLayout
  { path: '/profile', component: Profile, nếu (layout: )},
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };

*/

đối voái các trang 1 mình  1 layout chúng ta sẽ k để DefaultLayout ăn vào layout đó thì:
tạo 1 trang upload trong pages.
cấu hình route cho trang mới:
/*
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';
import Upload from '~/pages/Upload';

const publicRoutes = [
  { path: '/', component: Home },
  { path: '/following', component: Following },
  { path: '/profile', component: Profile },
  { path: '/upload', component: Upload, layout: null },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };
*/

tại APP.js:

/*
import { Fragment } from 'react';

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';
import { DefaultLayout } from '~/components/Layout';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route, index) => {
            const Layout = route.layout === null ? Fragment : DefaultLayout;
            const Page = route.component;
            return (
              <Route
                key={index}
                path={route.path}
                element={
                  <Layout>
                    <Page />
                  </Layout>
                }
              />
            );
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

*/

Trong up load vẫn có header:

Cách 1:
vào trang Upload 
/*
import Header from '~/components/Layout/DefaultLayout/Header';

function Upload() {
  return (
    <div>
      <Header />
      <div className="content">
        <h2>Upload Page</h2>
      </div>
    </div>
  );
}

export default Upload;

*/

Cách 2:
Tạo 1 cái layout mới
vào Layout tạo 1 cái HeaderOnly
Trong index.js của Layout:
/*
export { default as DefaultLayout } from './DefaultLayout';
export { default as HeaderOnly } from './HeaderOnly';

*/

trong route:
/*
//Layout
import { HeaderOnly } from '~/components/Layout';

//Pages
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';
import Upload from '~/pages/Upload';
import Search from '~/pages/Search';

const publicRoutes = [
  { path: '/', component: Home },
  { path: '/following', component: Following },
  { path: '/profile', component: Profile },
  { path: '/upload', component: Upload, layout: HeaderOnly },
  { path: '/search', component: Search, layout: null },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };


*/

trong trang App.js:
/*
import { Fragment } from 'react';

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';
import { DefaultLayout } from '~/components/Layout';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route, index) => {
            const Page = route.component;

            let Layout = DefaultLayout;

            if (route.layout) {
              Layout = route.layout;
            } else if (route.layout === null) {
              Layout = Fragment;
            }

            return (
              <Route
                key={index}
                path={route.path}
                element={
                  <Layout>
                    <Page />
                  </Layout>
                }
              />
            );
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

*/

trường hợp trùng 02 thư mục Header:
vào layout tạo thư mục components sau đó vào DefaultLayout cắt Header cắt lên components.
sau đó vào index của DefaultLayout sửa lại:
/*
import Header from '~/components/Layout/components/Header';
import Sidebar from './Sidebar';

function DefaultLayout({ children }) {
  return (
    <div>
      <Header />
      <div className="container">
        <Sidebar />
        <div className="content">{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;

*/

xóa bỏ header trong HeaderOnly sau đó vào index.js của HeaderOnly:
/*
import Header from '~/components/Layout/components/Header';

function DefaultLayout({ children }) {
  return (
    <div>
      <Header />
      <div className="container">
        <div className="content">{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;
*/

____________________________________

DỰNG KHUNG LAYOUT MẶC ĐỊNH

Vào component/Layout/components/Header tạo file Header.module.scss
Sau đó import vào index.js của Header.

đi cài thư viện classnames: npm i classnames.
sau đó import classnames vào trong index.js của Header:

trong index.js của Header
/*
import classNames from 'classnames/bind';

import styles from './Header.module.scss';

const cx = classNames.bind(styles);

function Header() {
  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}></div>
    </header>
  );
}

export default Header;


*/

trong Header.module.scss
/*
.wrapper {
  width: 100%;
  height: 60px;
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: 1150px;
  background-color: #ccc;
}


*/

sang GlobalStyles.scss:
/*
@import 'normalize.css';

@import url('https://fonts.googleapis.com/css2?family=Mitr:wght@300;400;500;600;700&display=swap');

:root {
  --primary: #fe2c55;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Mitr', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
}

*/

vào DefaultLayout tạo file DefaultLayout.module.scss 

chỉnh trong index.js - DefaultLayout:
/*
import classNames from 'classnames/bind';

import Header from '~/components/Layout/components/Header';
import styles from './DefaultLayout.module.scss';
import Sidebar from './Sidebar';

const cx = classNames.bind(styles);

function DefaultLayout({ children }) {
  return (
    <div className={cx('wrapper')}>
      <Header />
      <div className={cx('container')}>
        <Sidebar />
        <div className={cx('content')}>{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;

*/

trong DefaultLayout.module.scss 
/*
.wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.container {
  width: 1150px;
}

*/

làm sang Sidebar tạo file Sidebar.module.scss

trong index.js Sidebar
/*
import classNames from 'classnames/bind';

import styles from './Sidebar.module.scss';

const cx = classNames.bind(styles);

function Sidebar() {
  return <aside className={cx('wrapper')}>
    <h2>Sidebar</h2>
  </aside>;
}

export default Sidebar;

*/

trong Sidebar.module.scss
/*
.wrapper {
  width: 356px;
}

*/
__________________________________________
Xây dựng UI phần Header #1 phần header


Taọ thư mục asset - images - file index.js và logo.svg.

trong index.js - images:
/*
const images = {
  logo: require('~/assets/images/logo.svg'),
};
export default images;

*/
thay đổi trong file GlobalStyles.scss:
/*
@import 'normalize.css';

@import url('https://fonts.googleapis.com/css2?family=Mitr:wght@300;400;500;600;700&display=swap');

:root {
  --primary: #fe2c55;
  --black: #000;
  --text-color: #333;

  //Default Layout
  --default-layout-header-height: 60px;
  --default-layout-width-content: 1150px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Mitr', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
  color: var(--text-color);
}

button,
input,
[tabindex] {
  outline: none;
  border: none;
}

a [href] {
  color: var(--text-color);
  text-decoration: none;
}

*/

Thay đổi trong index.js Header:
/*
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleXmark, faMagnifyingGlass, faSpinner } from '@fortawesome/free-solid-svg-icons';

import styles from './Header.module.scss';

import images from '~/assets/images';

const cx = classNames.bind(styles);

function Header() {
  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>
        <div className={cx('search')}>
          <input placeholder="Search accounts and videos" spellCheck={false} />
          <button className={cx('clear-btn')}>
            <FontAwesomeIcon icon={faCircleXmark} />
          </button>
          <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />
          <button className={cx('search-btn')}>
            <FontAwesomeIcon icon={faMagnifyingGlass} />
          </button>
        </div>
        <div className={cx('actions')}></div>
      </div>
    </header>
  );
}

export default Header;

*/

Thay đổi trong Header.module.scss:
/*
.wrapper {
  --search-border-radius: 92px;
  --search-height: 46px;
  --search-top-spacer: 9px;
  --search-button-width: 52px;

  width: 100%;
  height: var(--default-layout-header-height, 60px);
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: var(--default-layout-width-content);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
}

.search {
  position: relative;
  width: 361px;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

*/

__________________________________________
Xây dựng UI phần Header #2 phần tìm kiếm

dùng thư viện tippy để làm khu vực kết quả tìm kiếm: https://github.com/atomiks/tippyjs-react
cú pháp cài đặt: npm i @tippyjs/react
để tìm hiểu thêm tippy lên google tìm Tippy react props:https://atomiks.github.io/tippyjs/v5/all-props/

trong index.js của Header:
/*
import { useEffect, useState } from 'react';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleXmark, faMagnifyingGlass, faSpinner } from '@fortawesome/free-solid-svg-icons';
import Tippy from '@tippyjs/react/headless';

import styles from './Header.module.scss';

import images from '~/assets/images';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';

const cx = classNames.bind(styles);

function Header() {
  const [searchResult, setSearchResult] = useState([]);

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([/*sau này sẽ gọi api nên giờ ẩn đi*/]);
    }, 0);
  }, []);

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <Tippy
          interactive
          visible={searchResult.length > 0}
          render={(attrs) => (
            <div className={cx('search-result')} tabIndex="-1" {...attrs}>
              <PopperWrapper>
                <h4 className={cx('search-title')}>Accounts</h4>
                <AccountItem />
                <AccountItem />
                <AccountItem />
                <AccountItem />
              </PopperWrapper>
            </div>
          )}
        >
          <div className={cx('search')}>
            <input placeholder="Search accounts and videos" spellCheck={false} />

            <button className={cx('clear-btn')}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>

            <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

            <button className={cx('search-btn')}>
              <FontAwesomeIcon icon={faMagnifyingGlass} />
            </button>
          </div>
        </Tippy>

        <div className={cx('actions')}></div>
      </div>
    </header>
  );
}

export default Header;

*/

Tạo 1 coponents nữa chung vói thư viện Layout và GlobalStyle gọi là Popper:

trong file index của Popper:
/*
export {default as Wrapper} from './Wrapper'
*/

trong file Wrapper của Popper:
/*
import classNames from 'classnames/bind';

import styles from './Popper.module.scss';

const cx = classNames.bund(styles);

function Wrapper({ children }) {
  return <div className={cx('wapper')}>{children}</div>;
}

export default Wrapper;

*/
Trong phanaf index Header:
/* 
import { useEffect, useState } from 'react';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleXmark, faMagnifyingGlass, faSpinner } from '@fortawesome/free-solid-svg-icons';

import Tippy from '@tippyjs/react/headless';

import styles from './Header.module.scss';

import images from '~/assets/images';

import { Wrapper as PopperWrapper } from '~/components/Popper';

const cx = classNames.bind(styles);

function Header() {
  const [searchResult, setSearchResult] = useState([]);

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([1, 2, 3]);
    }, 3000);
  }, []);

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <Tippy
          interactive
          visible={searchResult.length > 0}
          render={(attrs) => (
            <PopperWrapper>
              <div className={cx('search-result')} tabIndex="-1" {...attrs}>
                Kết Quả
              </div>
            </PopperWrapper>
          )}
        >
          <div className={cx('search')}>
            <input placeholder="Search accounts and videos" spellCheck={false} />

            <button className={cx('clear-btn')}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>

            <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

            <button className={cx('search-btn')}>
              <FontAwesomeIcon icon={faMagnifyingGlass} />
            </button>
          </div>
        </Tippy>

        <div className={cx('actions')}></div>
      </div>
    </header>
  );
}

export default Header;

*/

Trong file Popper.module.scss:
/*
.wrapper {
  width: 100%;
  max-height: min((100vh - 96px) - 60px, 734px);
  min-height: 100px;
  padding-top: 8px;
  border-radius: 8px;
  background: rgb(255, 255, 255);
  box-shadow: rgb(0 0 0 / 12%) 0px 2px 12px;
}

*/

Tạo thêm 1 thư mục components/AcCountItem

Trong file index.js AcCountItem:
/*
import classNames from 'classnames/bind';
import styles from './AccountItem.module.scss';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle } from '@fortawesome/free-solid-svg-icons';

const cx = classNames.bind(styles);

function AccountItem() {
  return (
    <div className={cx('wrapper')}>
      <img
        className={cx('avatar')}
        src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/4abd3d07ddea0f1c636aec1bba9cf997~c5_100x100.jpeg?x-expires=1682524800&x-signature=7L6g4kvIdlbeqZBQAkzAKSg4iOA%3D"
        alt="Roisee"
      />
      <div className={cx('info')}>
        <h4 className={cx('name')}>
          <span>Roisee</span>
          <FontAwesomeIcon className={cx('check')} icon={faCheckCircle} />
        </h4>
        <span className={cx('username')}>Hoàng Thị Hằng Phượng</span>
      </div>
    </div>
  );
}

export default AccountItem;

*/

Trong file Scss AcCountItem:
/*
.wrapper {
  display: flex;
  align-items: center;
  padding: 9px 16px;
  cursor: pointer;

  &:hover {
    background: rgba(22, 24, 35, 0.03);
  }
}

.avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
}

.info {
  flex: 1;
  margin-left: 12px;
}

.name {
  font-size: 1.4rem;
  font-weight: 500;
}

.check {
  margin-left: 6px;
  color: rgb(32, 213, 236);
}

.username {
  font-size: 1.4rem;
  color: rgb(22, 24, 35, 0.5);
}
*/

____________________________________
Xây dựng UI phần Header #3 nút nhấn

Vào src/components/Button/index.js & Button.module.scss

Trong Button/index.js:
/*
import { Link } from 'react-router-dom';

import classNames from 'classnames/bind';
import styles from './Button.module.scss';

const cx = classNames.bind(styles);

function Button({
  to,
  href,
  primary = false,
  outline = false,
  text = false,
  rounded = false,
  disabled = false,
  small = false,
  large = false,
  children,
  className,
  leftIcon,
  rightIcon,
  onClick,
  ...passProps
}) {
  let Comp = 'button';

  const props = {
    onClick,
    ...passProps,
  };

  //Xóa lắng nghe sự kiện khi nút nhắn không hoạt động
  if (disabled) {
    Object.keys(props).forEach((key) => {
      if (key.startsWith('on') && typeof props[key] === 'function') {
        delete props[key];
      }
    });
  }

  if (to) {
    props.to = to;
    Comp = Link;
  } else if (href) {
    props.href = href;
    Comp = 'a';
  }

  const classes = cx('wrapper', {
    [className]: className,
    primary,
    outline,
    text,
    disabled,
    rounded,
    small,
    large,
  });

  return (
    <Comp className={classes} {...props}>
      {leftIcon && <span className={cx('icon')}>{leftIcon}</span>}
      <span className={cx('title')}>{children}</span>
      {rightIcon && <span className={cx('icon')}>{rightIcon}</span>}
    </Comp>
  );
}

export default Button;

*/

Đi vào Layout/components/Header vào file index của nó

Trong Header/index.js:
/*
import { useEffect, useState } from 'react';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleXmark, faMagnifyingGlass, faSpinner } from '@fortawesome/free-solid-svg-icons';
import Tippy from '@tippyjs/react/headless';

import styles from './Header.module.scss';

import images from '~/assets/images';

import { Wrapper as PopperWrapper } from '~/components/Popper';

import AccountItem from '~/components/AccountItem';

import Button from '~/components/Button';

const cx = classNames.bind(styles);

function Header() {
  const [searchResult, setSearchResult] = useState([]);

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([
        /*sau này sẽ gọi api nên giờ ẩn đi*/
      ]);
    }, 0);
  }, []);

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <Tippy
          interactive
          visible={searchResult.length > 0}
          render={(attrs) => (
            <div className={cx('search-result')} tabIndex="-1" {...attrs}>
              <PopperWrapper>
                <h4 className={cx('search-title')}>Accounts</h4>
                <AccountItem />
                <AccountItem />
                <AccountItem />
                <AccountItem />
              </PopperWrapper>
            </div>
          )}
        >
          <div className={cx('search')}>
            <input placeholder="Search accounts and videos" spellCheck={false} />

            <button className={cx('clear-btn')}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>

            <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

            <button className={cx('search-btn')}>
              <FontAwesomeIcon icon={faMagnifyingGlass} />
            </button>
          </div>
        </Tippy>

        <div className={cx('actions')}>
          <Button text>Upload</Button>
          <Button primary>Log in</Button>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

Trong Button/Button.module.scss:
/*
.wrapper {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 100px;
  padding: 9px 16px;
  border-radius: 4px;
  font-size: 1.6rem;
  font-weight: 700;
  text-align: center;
  cursor: pointer;
  background-color: var(--White);
  border: 1px solid transparent;
  user-select: none;

  + .wrapper {
    margin-left: 8px;
  }
  //Disabled
  &.disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

.icon + .title,
.title + .icon {
  margin-left: 8px;
}

//Button types

.rounded {
  border-radius: 999px;
  box-shadow: 0 2px 8px rgb(0 0 0 / 6%);
  border-color: rgba(22, 24, 35, 0.12);

  &:hover {
    border-color: rgba(22, 24, 35, 0.2);
    background-color: rgba(22, 24, 35, 0.03);
  }
}

.primary {
  color: var(--White);
  background-color: var(--primary);
  border-color: var(--primary);

  &:hover {
    border-color: var(--primary);
    background: linear-gradient(0deg, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0.06)), #fe2c55;
  }
}

.outline {
  color: var(--primary);
  border-color: currentColor;

  &:hover {
    border-color: currentColor;
    background-color: rgba(254, 44, 85, 0.06);
  }
}

.text {
  &:hover {
    text-decoration: underline;
  }
}

//Button size
.small {
  min-width: 88px;
  padding: 4px 16px;
}

.large {
  padding: 14px 16px;
  min-width: 140px;
}

*/

Tạo thêm biến GlobalStyle:
/*
@import 'normalize.css';

@import url('https://fonts.googleapis.com/css2?family=Mitr:wght@300;400;500;600;700&display=swap');

:root {
  --primary: #fe2c55;
  --black: #000;
  --White: #fff;
  --text-color: #333;

  //Default Layout
  --default-layout-header-height: 60px;
  --default-layout-width-content: 1150px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Mitr', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
  color: var(--text-color);
}

button,
input,
[tabindex] {
  outline: none;
  border: none;
}

a,
[href] {
  color: var(--text-color);
  text-decoration: none;
}

*/

_________________________________
Xây dựng UI phần Header #4 Ui của Header

trong file components/Header/index.js
/*

*/

Trong file components/Header/Header.module.scss
/*
.wrapper {
  --search-border-radius: 92px;
  --search-height: 46px;
  --search-top-spacer: 9px;
  --search-button-width: 52px;

  width: 100%;
  height: var(--default-layout-header-height, 60px);
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: var(--default-layout-width-content);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
}

.search,
.search-result {
  width: 361px;
}

.search {
  position: relative;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.search-title {
  padding: 5px 12px;
  font-size: 1.4rem;
  font-weight: 500;
  color: rgba(22, 24, 35, 0.5);
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

.more-btn {
  font-size: 2rem;
  margin-left: 28px;
  padding: 4px 8px;
  background-color: transparent;
}


*/

Tạo Popper/Menu/index.js

Trong Menu/index.js:
/*
import Tippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import MenuItem from './MenuItem';
import styles from './Menu.module.scss';

const cx = classNames.bind(styles);

function Menu({ children, items = [] }) {
  const renderItems = () => {
    return items.map((item, index) => <MenuItem key={index} data={item} />);
  };

  return (
    <Tippy
      interactive
      delay={[0, 700]}
      placement="bottom-end"
      render={(attrs) => (
        <div className={cx('menu-list')} tabIndex="-1" {...attrs}>
          <PopperWrapper className={cx('menu-popper')}>{renderItems()}</PopperWrapper>
        </div>
      )}
    >
      {children}
    </Tippy>
  );
}

export default Menu;

*/

Trong Menu/Menu.module.scss:
/*
//Menu wrapper
.menu-list {
  width: 224px;

  //Menu item
  .menu-item {
    margin-left: 0;
  }
}

.menu-popper {
  padding-bottom: 8px;
}

//Menu item
.menu-item {
  width: 100%;
  justify-content: flex-start;
  border-radius: 0;
  font-weight: unset;
  padding: 11px 16px;

  &:hover {
    background-color: rgba(22, 24, 35, 0.03);
  }
}

*/

Trong Menu/MenuItem.js
/*
import Button from '~/components/Button';
import classNames from 'classnames/bind';
import styles from './Menu.module.scss';

const cx = classNames.bind(styles);

function MenuItem({ data }) {
  return (
    <Button className={cx('menu-item')} leftIcon={data.icon} to={data.to}>
      {data.title}
    </Button>
  );
}

export default MenuItem;

*/

Trong Button/Buttom.module.scss
/*
.wrapper {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 100px;
  padding: 9px 16px;
  border-radius: 4px;
  font-size: 1.6rem;
  font-weight: 700;
  text-align: center;
  cursor: pointer;
  background-color: var(--White);
  border: 1px solid transparent;
  user-select: none;

  + .wrapper {
    margin-left: 8px;
  }
  //Disabled
  &.disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

.icon + .title,
.title + .icon {
  margin-left: 8px;
}

.icon {
  display: inline-block;
  width: 24px;
  text-align: center;
}

//Button types

.rounded {
  border-radius: 999px;
  box-shadow: 0 2px 8px rgb(0 0 0 / 6%);
  border-color: rgba(22, 24, 35, 0.12);

  &:hover {
    border-color: rgba(22, 24, 35, 0.2);
    background-color: rgba(22, 24, 35, 0.03);
  }
}

.primary {
  color: var(--White);
  background-color: var(--primary);
  border-color: var(--primary);

  &:hover {
    border-color: var(--primary);
    background: linear-gradient(0deg, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0.06)), #fe2c55;
  }
}

.outline {
  color: var(--primary);
  border-color: currentColor;

  &:hover {
    border-color: currentColor;
    background-color: rgba(254, 44, 85, 0.06);
  }
}

.text {
  &:hover {
    text-decoration: underline;
  }
}

//Button size
.small {
  min-width: 88px;
  padding: 4px 16px;
}

.large {
  padding: 14px 16px;
  min-width: 140px;
}
*/

Trong file Popper/Wrapper.js
/*
import classNames from 'classnames/bind';

import styles from './Popper.module.scss';

const cx = classNames.bind(styles);

function Wrapper({ children, className }) {
  return <div className={cx('wrapper', className)}>{children}</div>;
}

export default Wrapper;

*/


______________________________
Xây dựng UI phần Header #5

Trong components/GlobalStyle/GlobalStyle.module.scss:
/*
@import 'normalize.css';

@import url('https://fonts.googleapis.com/css2?family=Mitr:wght@300;400;500;600;700&display=swap');

:root {
  --primary: #fe2c55;
  --black: #000;
  --White: #fff;
  --text-color: #333;

  //Default Layout
  --default-layout-header-height: 60px;
  --default-layout-width-content: 1150px;
  --default-layout-horizontal-spacer: 24px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Mitr', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
  color: var(--text-color);
}

button,
input,
[tabindex] {
  outline: none;
  border: none;
}

a,
[href] {
  color: var(--text-color);
  text-decoration: none;
}
*/

Vào components/Layout/components/Header.module.scss:
/*
.wrapper {
  --search-border-radius: 92px;
  --search-height: 46px;
  --search-top-spacer: 9px;
  --search-button-width: 52px;

  width: 100%;
  height: var(--default-layout-header-height, 60px);
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: var(--default-layout-width-content);
  padding: 0 var(--default-layout-horizontal-spacer);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
}

.search,
.search-result {
  width: 361px;
}

.search {
  position: relative;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.search-title {
  padding: 5px 12px;
  font-size: 1.4rem;
  font-weight: 500;
  color: rgba(22, 24, 35, 0.5);
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

.more-btn {
  font-size: 2rem;
  margin-left: 28px;
  padding: 4px 8px;
  background-color: transparent;
  cursor: pointer;
}

*/

Trong Layout/DefaultLayout/DefaultLayout.module.scss:
/*
.wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.container {
  width: var(--default-layout-width-content);
  padding: 0 var(--default-layout-horizontal-spacer);
  display: flex;
}

.content {
  flex: 1;
}

*/

trong components/Popper/Menu/Menu.module.scss:
/*
//Menu wrapper
.menu-list {
  width: 224px;

  //Menu item
  .menu-item {
    margin-left: 0;
  }
}

.menu-popper {
  padding-bottom: 8px;
}

//Menu item
.menu-item {
  width: 100%;
  justify-content: flex-start;
  border-radius: 0;
  font-weight: unset;
  padding: 11px 16px;
  line-height: 1.8rem;

  &:hover {
    background-color: rgba(22, 24, 35, 0.03);
  }
}
*/

Trong Popper/Menu/Header.js
/*
import classNames from 'classnames/bind';

import styles from './Menu.module.scss';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChevronLeft } from '@fortawesome/free-solid-svg-icons';

const cx = classNames.bind(styles);

function Header({ title, onBack }) {
  return (
    <header className={cx('header')}>
      <button className={cx('back-btn')} onClick={onBack}>
        <FontAwesomeIcon icon={faChevronLeft} />
      </button>
      <h4 className={cx('header-title')}>{title}</h4>
    </header>
  );
}

export default Header;

*/

Trong Popper/Menu/index.js
/*
import Tippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import MenuItem from './MenuItem';
import styles from './Menu.module.scss';
import Header from './Header';
import { useState } from 'react';

const cx = classNames.bind(styles);

const defaultFn = () => {};

function Menu({ children, items = [], onChange = defaultFn }) {
  const [history, setHistory] = useState([{ data: items }]);
  const current = history[history.length - 1];

  const renderItems = () => {
    return current.data.map((item, index) => {
      const isParent = !!item.children;

      return (
        <MenuItem
          key={index}
          data={item}
          onClick={() => {
            if (isParent) {
              setHistory((prev) => [...prev, item.children]);
            } else {
              onChange(item);
            }
          }}
        />
      );
    });
  };

  return (
    <Tippy
      interactive
      delay={[0, 700]}
      placement="bottom-end"
      render={(attrs) => (
        <div className={cx('menu-list')} tabIndex="-1" {...attrs}>
          <PopperWrapper className={cx('menu-popper')}>
            {history.length > 1 && (
              <Header
                title="Language"
                onBack={() => {
                  setHistory((prev) => prev.slice(0, prev.length - 1));
                }}
              />
            )}
            {renderItems()}
          </PopperWrapper>
        </div>
      )}
    >
      {children}
    </Tippy>
  );
}

export default Menu;

*/

Trong components/Layout/components/Header/index.js:
/*
import { useEffect, useState } from 'react';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faCircleXmark,
  faMagnifyingGlass,
  faSpinner,
  faEllipsisVertical,
  faEarthAsia,
  faCircleQuestion,
  faKeyboard,
} from '@fortawesome/free-solid-svg-icons';
import Tippy from '@tippyjs/react/headless';

import styles from './Header.module.scss';

import images from '~/assets/images';

import { Wrapper as PopperWrapper } from '~/components/Popper';

import AccountItem from '~/components/AccountItem';

import Button from '~/components/Button';

import Menu from '~/components/Popper/Menu';

const cx = classNames.bind(styles);

const MENU_ITEMS = [
  {
    icon: <FontAwesomeIcon icon={faEarthAsia} />,
    title: 'English',
    children: {
      title: 'Language',
      data: [
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
          children: {
            title: 'Vùng Miềng',
            data: [
              {
                code: 'vin',
                title: 'Tiếng Việt Bắc',
              },
              {
                code: 'vis',
                title: 'Tiếng Việt Nam',
                children: {
                  title: 'Hướng',
                  data: [
                    {
                      code: 'visw',
                      title: 'Tiếng Việt Tây',
                    },
                    {
                      code: 'vise',
                      title: 'Tiếng Việt Đông',
                    },
                  ],
                },
              },
            ],
          },
        },
      ],
    },
  },
  {
    icon: <FontAwesomeIcon icon={faCircleQuestion} />,
    title: 'Feedback and Help',
    to: '/feedback',
  },
  {
    icon: <FontAwesomeIcon icon={faKeyboard} />,
    title: 'Keyboard Shortcuts',
  },
];

function Header() {
  const [searchResult, setSearchResult] = useState([]);

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([
        /*sau này sẽ gọi api nên giờ ẩn đi*/
      ]);
    }, 0);
  }, []);

  //Handle logic
  const handleMenuChange = (menuItem) => {
    switch (menuItem.type) {
      case 'Vietnamess':
        //Handle change language
        break;
      default:
    }
  };

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <Tippy
          interactive
          visible={searchResult.length > 0}
          render={(attrs) => (
            <div className={cx('search-result')} tabIndex="-1" {...attrs}>
              <PopperWrapper>
                <h4 className={cx('search-title')}>Accounts</h4>
                <AccountItem />
                <AccountItem />
                <AccountItem />
                <AccountItem />
              </PopperWrapper>
            </div>
          )}
        >
          <div className={cx('search')}>
            <input placeholder="Search accounts and videos" spellCheck={false} />

            <button className={cx('clear-btn')}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>

            <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

            <button className={cx('search-btn')}>
              <FontAwesomeIcon icon={faMagnifyingGlass} />
            </button>
          </div>
        </Tippy>

        <div className={cx('actions')}>
          <Button text>Upload</Button>
          <Button primary>Log in</Button>

          <Menu items={MENU_ITEMS} onChange={handleMenuChange}>
            <button className={cx('more-btn')}>
              <FontAwesomeIcon icon={faEllipsisVertical} />
            </button>
          </Menu>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

Trong components/Propper/Menu/MenuItem.js
/*
import Button from '~/components/Button';
import classNames from 'classnames/bind';
import styles from './Menu.module.scss';

const cx = classNames.bind(styles);

function MenuItem({ data, onClick }) {
  return (
    <Button className={cx('menu-item')} leftIcon={data.icon} to={data.to} onClick={onClick}>
      {data.title}
    </Button>
  );
}

export default MenuItem;

*/

Trong components/Popper/Menu/Menu.module.scss
/*
//Menu wrapper
.menu-list {
  width: 224px;

  //Menu item
  .menu-item {
    margin-left: 0;
  }
}

.menu-popper {
  padding-bottom: 8px;
}

//Menu item
.menu-item {
  width: 100%;
  justify-content: flex-start;
  border-radius: 0;
  font-weight: unset;
  padding: 11px 16px;
  line-height: 1.8rem;

  &:hover {
    background-color: rgba(22, 24, 35, 0.03);
  }
}

//Header language menu
.header {
  position: relative;
  height: 50px;
  margin-top: -8px;
}

.back-btn {
  width: 50px;
  height: 100%;
  background-color: transparent;
  cursor: pointer;
}

.header-title {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

*/
______________________________
Xây dựng UI phần Header #6

fix lỗi bài trước:
Trong components/Popper/Menu/index.js
/*
import Tippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import MenuItem from './MenuItem';
import styles from './Menu.module.scss';
import Header from './Header';
import { useState } from 'react';

const cx = classNames.bind(styles);

const defaultFn = () => {};

function Menu({ children, items = [], onChange = defaultFn }) {
  const [history, setHistory] = useState([{ data: items }]);
  const current = history[history.length - 1];

  const renderItems = () => {
    return current.data.map((item, index) => {
      const isParent = !!item.children;

      return (
        <MenuItem
          key={index}
          data={item}
          onClick={() => {
            if (isParent) {
              setHistory((prev) => [...prev, item.children]);
            } else {
              onChange(item);
            }
          }}
        />
      );
    });
  };

  return (
    <Tippy
      interactive
      delay={[0, 700]}
      placement="bottom-end"
      render={(attrs) => (
        <div className={cx('menu-list')} tabIndex="-1" {...attrs}>
          <PopperWrapper className={cx('menu-popper')}>
            {history.length > 1 && (
              <Header
                title="Language"
                onBack={() => {
                  setHistory((prev) => prev.slice(0, prev.length - 1));
                }}
              />
            )}
            {renderItems()}
          </PopperWrapper>
        </div>
      )}
      onHide={() => setHistory((prev) => prev.slice(0, 1))}
    >
      {children}
    </Tippy>
  );
}

export default Menu;
*/

Bìa 06 bắt đầu
Trong Layout/components/Header/index.js
/*
import { useEffect, useState } from 'react';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faCircleXmark,
  faMagnifyingGlass,
  faSpinner,
  faEllipsisVertical,
  faEarthAsia,
  faCircleQuestion,
  faKeyboard,
  faCloudUpload,
  faMessage,
  faUser,
  faCoins,
  faGear,
  faSignOut,
} from '@fortawesome/free-solid-svg-icons';
import 'tippy.js/dist/tippy.css';

import Tippy from '@tippyjs/react';
import HeadlessTippy from '@tippyjs/react/headless';
import 'tippy.js/dist/tippy.css';

import styles from './Header.module.scss';

import images from '~/assets/images';

import { Wrapper as PopperWrapper } from '~/components/Popper';

import AccountItem from '~/components/AccountItem';

import Button from '~/components/Button';

import Menu from '~/components/Popper/Menu';

const cx = classNames.bind(styles);

const MENU_ITEMS = [
  {
    icon: <FontAwesomeIcon icon={faEarthAsia} />,
    title: 'English',
    children: {
      title: 'Language',
      data: [
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
          children: {
            title: 'Vùng Miềng',
            data: [
              {
                code: 'vin',
                title: 'Tiếng Việt Bắc',
              },
              {
                code: 'vis',
                title: 'Tiếng Việt Nam',
                children: {
                  title: 'Hướng',
                  data: [
                    {
                      code: 'visw',
                      title: 'Tiếng Việt Tây',
                    },
                    {
                      code: 'vise',
                      title: 'Tiếng Việt Đông',
                    },
                  ],
                },
              },
            ],
          },
        },
      ],
    },
  },
  {
    icon: <FontAwesomeIcon icon={faCircleQuestion} />,
    title: 'Feedback and Help',
    to: '/feedback',
  },
  {
    icon: <FontAwesomeIcon icon={faKeyboard} />,
    title: 'Keyboard Shortcuts',
  },
];

function Header() {
  const [searchResult, setSearchResult] = useState([]);

  const currentUser = true;

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([
        /*sau này sẽ gọi api nên giờ ẩn đi*/
      ]);
    }, 0);
  }, []);

  //Handle logic
  const handleMenuChange = (menuItem) => {
    switch (menuItem.type) {
      case 'Vietnamess':
        //Handle change language
        break;
      default:
    }
  };

  const userMenu = [
    {
      icon: <FontAwesomeIcon icon={faUser} />,
      title: 'View profile',
      to: '/@thanhmeo.18',
    },
    {
      icon: <FontAwesomeIcon icon={faCoins} />,
      title: 'Get coins',
      to: '/coins',
    },
    {
      icon: <FontAwesomeIcon icon={faGear} />,
      title: 'Setting',
      to: '/setting',
    },
    ...MENU_ITEMS,
    {
      icon: <FontAwesomeIcon icon={faSignOut} />,
      title: 'Log out',
      to: '/logout',
      separate: true,
    },
  ];

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <HeadlessTippy
          interactive
          visible={searchResult.length > 0}
          render={(attrs) => (
            <div className={cx('search-result')} tabIndex="-1" {...attrs}>
              <PopperWrapper>
                <h4 className={cx('search-title')}>Accounts</h4>
                <AccountItem />
                <AccountItem />
                <AccountItem />
                <AccountItem />
              </PopperWrapper>
            </div>
          )}
        >
          <div className={cx('search')}>
            <input placeholder="Search accounts and videos" spellCheck={false} />

            <button className={cx('clear-btn')}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>

            <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

            <button className={cx('search-btn')}>
              <FontAwesomeIcon icon={faMagnifyingGlass} />
            </button>
          </div>
        </HeadlessTippy>

        <div className={cx('actions')}>
          {currentUser ? (
            <>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <FontAwesomeIcon icon={faCloudUpload} />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Inbox" placement="bottom">
                <button className={cx('action-btn')}>
                  <FontAwesomeIcon icon={faMessage} />
                </button>
              </Tippy>
            </>
          ) : (
            <>
              <Button text>Upload</Button>
              <Button primary>Log in</Button>
            </>
          )}

          <Menu items={currentUser ? userMenu : MENU_ITEMS} onChange={handleMenuChange}>
            {currentUser ? (
              <img
                src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/33fd8341eec3c69dc34972b27738b860~c5_100x100.jpeg?x-expires=1682920800&x-signature=V%2B%2FvdiQnIJYhg%2Bjq7Nt3zij%2BGcQ%3D"
                className={cx('user-avatar')}
                alt=""
              />
            ) : (
              <button trigger="click" className={cx('more-btn')}>
                <FontAwesomeIcon icon={faEllipsisVertical} />
              </button>
            )}
          </Menu>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

Trong Layout/components/Header/Header.module.scss:
/*
.wrapper {
  --search-border-radius: 92px;
  --search-height: 46px;
  --search-top-spacer: 9px;
  --search-button-width: 52px;

  width: 100%;
  height: var(--default-layout-header-height, 60px);
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: var(--default-layout-width-content);
  padding: 0 var(--default-layout-horizontal-spacer);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
}

.search,
.search-result {
  width: 361px;
}

.search {
  position: relative;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.search-title {
  padding: 5px 12px;
  font-size: 1.4rem;
  font-weight: 500;
  color: rgba(22, 24, 35, 0.5);
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

//Actions
.actions {
  display: flex;
  align-items: center;
}

.more-btn {
  font-size: 2rem;
  margin-left: 28px;
  padding: 4px 8px;
  background-color: transparent;
  cursor: pointer;
}

.action-btn {
  font-size: 2.2rem;
  color: #161823;
  background-color: transparent;
  padding: 4px 12px;
  cursor: pointer;
}

.user-avatar {
  width: 32px;
  height: 32px;
  object-fit: cover;
  border-radius: 50%;
  margin-left: 12px;
  cursor: pointer;
}

*/

Trong file components/GlobalStyles/GlobalStyles.scss:
/*
@import 'normalize.css';

@import url('https://fonts.googleapis.com/css2?family=Mitr:wght@200;300;400;500;600;700;800;900&display=swap');

:root {
  --primary: #fe2c55;
  --black: #000;
  --White: #fff;
  --text-color: #161823;

  //Default Layout
  --default-layout-header-height: 60px;
  --default-layout-width-content: 1150px;
  --default-layout-horizontal-spacer: 24px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Mitr', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
  color: var(--text-color);
}

button,
input,
[tabindex] {
  outline: none;
  border: none;
}

a,
[href] {
  color: var(--text-color);
  text-decoration: none;
}

// Custom tippy tooltip
body {
  .tippy-box {
    border-radius: 8px;
    font-weight: 600;
    font-size: 1.6rem;
    line-height: 2.2rem;
    background-color: rgba(84, 84, 84, 0.92);
  }

  .tippy-arrow {
    color: rgba(84, 84, 84, 0.92);
  }

  .tippy-content {
    padding: 8px 9px;
  }

  .tippy-box[data-placement^='bottom'] > .tippy-arrow,
  before {
    top: -1px;
  }
}

*/

Trong components/Popper/Menu/MenuItems.js:
/*
import Button from '~/components/Button';
import classNames from 'classnames/bind';
import styles from './Menu.module.scss';

const cx = classNames.bind(styles);

function MenuItem({ data, onClick }) {
  const classes = cx('menu-item', {
    separate: data.separate,
  });

  return (
    <Button className={classes} leftIcon={data.icon} to={data.to} onClick={onClick}>
      {data.title}
    </Button>
  );
}

export default MenuItem;

*/

Trong components/Popper/Menu/index.js:
/*
import Tippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import MenuItem from './MenuItem';
import styles from './Menu.module.scss';
import Header from './Header';
import { useState } from 'react';

const cx = classNames.bind(styles);

const defaultFn = () => {};

function Menu({ children, items = [], onChange = defaultFn }) {
  const [history, setHistory] = useState([{ data: items }]);
  const current = history[history.length - 1];

  const renderItems = () => {
    return current.data.map((item, index) => {
      const isParent = !!item.children;

      return (
        <MenuItem
          key={index}
          data={item}
          onClick={() => {
            if (isParent) {
              setHistory((prev) => [...prev, item.children]);
            } else {
              onChange(item);
            }
          }}
        />
      );
    });
  };

  return (
    <Tippy
      interactive
      delay={[0, 700]}
      offset={[12, 8]}
      placement="bottom-end"
      render={(attrs) => (
        <div className={cx('menu-list')} tabIndex="-1" {...attrs}>
          <PopperWrapper className={cx('menu-popper')}>
            {history.length > 1 && (
              <Header
                title="Language"
                onBack={() => {
                  setHistory((prev) => prev.slice(0, prev.length - 1));
                }}
              />
            )}
            {renderItems()}
          </PopperWrapper>
        </div>
      )}
      onHide={() => setHistory((prev) => prev.slice(0, 1))}
    >
      {children}
    </Tippy>
  );
}

export default Menu;

*/

Trong components/Popper/Menu/Menu.module.scss:
/*
//Menu wrapper
.menu-list {
  width: 224px;

  //Menu item
  .menu-item {
    margin-left: 0;
  }
}

.menu-popper {
  padding-bottom: 8px;
}

//Menu item
.menu-item {
  width: 100%;
  justify-content: flex-start;
  border-radius: 0;
  font-weight: 600;
  padding: 11px 16px;
  line-height: 1.8rem;

  &.separate {
    border-top: 1px solid rgba(22, 24, 35, 0.12);
  }
  s &:hover {
    background-color: rgba(22, 24, 35, 0.03);
  }
}

//Header language menu
.header {
  position: relative;
  height: 50px;
  margin-top: -8px;
}

.back-btn {
  width: 50px;
  height: 100%;
  background-color: transparent;
  cursor: pointer;
}

.header-title {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

*/
________________________________
Xây dựng UI phần Header #7
- Thay đổi font trang chính
- thay đổi icon header cho giống tiktok
- tạo 1 components/images để có thể tái sử dụng khi làm trong dự án

Thay font
Trong components/GlobalStyle/GlobalStyle.scss
/*
@import 'normalize.css';

:root {
  --primary: #fe2c55;
  --black: #000;
  --White: #fff;
  --text-color: #161823;

  //Default Layout
  --default-layout-header-height: 60px;
  --default-layout-width-content: 1150px;
  --default-layout-horizontal-spacer: 24px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'ProximaNova', 'SofiaPro', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
  color: var(--text-color);
}

button,
input,
[tabindex] {
  outline: none;
  border: none;
}

a,
[href] {
  color: var(--text-color);
  text-decoration: none;
}

//Fonts emmbeded
@font-face {
  font-family: ProximaNova;
  src: url('/assets/fonts/Proxima-Nova-Regular.woff2');
  font-weight: 400;
}
@font-face {
  font-family: ProximaNova;
  src: url('/assets/fonts/ProximaNova-Semibold.woff2');
  font-weight: 600;
}
@font-face {
  font-family: SofiaPro;
  src: url('/assets/fonts/sofiapro-semibold.otf');
  font-weight: 600;
}
@font-face {
  font-family: ProximaNova;
  src: url('/assets/fonts/Proxima-Nova-Bold.woff2');
  font-weight: 700;
}
@font-face {
  font-family: SofiaPro;
  src: url('/assets/fonts/sofiapro-bold.woff2');
  font-weight: 700;
}

// Custom tippy tooltip
body {
  .tippy-box {
    border-radius: 8px;
    font-weight: 600;
    font-size: 1.6rem;
    line-height: 2.2rem;
    background-color: rgba(84, 84, 84, 0.92);
  }

  .tippy-arrow {
    color: rgba(84, 84, 84, 0.92);
  }

  .tippy-content {
    padding: 8px 9px;
  }

  .tippy-box[data-placement^='bottom'] > .tippy-arrow,
  before {
    top: -1px;
  }
}

*/

Trong components/Buttom/Buttom.module.scss:
/*
.wrapper {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 100px;
  padding: 9px 16px;
  border-radius: 4px;
  font-size: 1.6rem;
  font-weight: 700;
  font-family: 'ProximaNova', 'SofiaPro', sans-serif;
  text-align: center;
  cursor: pointer;
  background-color: var(--White);
  border: 1px solid transparent;
  user-select: none;

  + .wrapper {
    margin-left: 8px;
  }
  //Disabled
  &.disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

.icon + .title,
.title + .icon {
  margin-left: 8px;
}

.icon {
  display: inline-block;
  width: 24px;
  text-align: center;
}

//Button types

.rounded {
  border-radius: 999px;
  box-shadow: 0 2px 8px rgb(0 0 0 / 6%);
  border-color: rgba(22, 24, 35, 0.12);

  &:hover {
    border-color: rgba(22, 24, 35, 0.2);
    background-color: rgba(22, 24, 35, 0.03);
  }
}

.primary {
  color: var(--White);
  background-color: var(--primary);
  border-color: var(--primary);

  &:hover {
    border-color: var(--primary);
    background: linear-gradient(0deg, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0.06)), #fe2c55;
  }
}

.outline {
  color: var(--primary);
  border-color: currentColor;

  &:hover {
    border-color: currentColor;
    background-color: rgba(254, 44, 85, 0.06);
  }
}

.text {
  &:hover {
    text-decoration: underline;
  }
}

//Button size
.small {
  min-width: 88px;
  padding: 4px 16px;
}

.large {
  padding: 14px 16px;
  min-width: 140px;
}

*/

Thay icon
Trong components/Icons/index.js
/*
export const UploadIcon = ({ className, width = '3.2rem', height = '3.2rem' }) => (
  <svg
    className={className}
    width={width}
    height={height}
    viewBox="0 0 32 32"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M22.1571 13.8359L21.9247 12.3786C21.4686 9.51917 18.9876 7.3335 16 7.3335C12.6863 7.3335 10 10.0197 9.99996 13.3334L10.0011 15.2304L8.11578 15.3398C6.19293 15.4513 4.66663 17.0482 4.66663 19.0002C4.66663 21.0252 6.30825 22.6668 8.33329 22.6668H15.3333V17.0813L14.1785 18.236C13.9182 18.4964 13.4961 18.4964 13.2357 18.236L12.7643 17.7646C12.504 17.5043 12.504 17.0822 12.7643 16.8218L15.862 13.7242C16.1223 13.4638 16.5444 13.4638 16.8048 13.7242L19.9024 16.8218C20.1628 17.0822 20.1628 17.5043 19.9024 17.7646L19.431 18.236C19.1706 18.4964 18.7485 18.4964 18.4882 18.236L17.3333 17.0811V22.6668H23C25.3932 22.6668 27.3333 20.7267 27.3333 18.3335C27.3333 16.151 25.7179 14.3423 23.6181 14.0437L22.1571 13.8359ZM8.33329 24.6668H15.3333H17.3333H23C26.4978 24.6668 29.3333 21.8313 29.3333 18.3335C29.3333 15.1411 26.9714 12.5005 23.8997 12.0636C23.2913 8.24881 19.9861 5.3335 16 5.3335C11.5817 5.3335 7.99996 8.91522 7.99996 13.3335L7.99996 13.3431C5.0255 13.5157 2.66663 15.9824 2.66663 19.0002C2.66663 22.1298 5.20368 24.6668 8.33329 24.6668Z"
    ></path>
  </svg>
);

export const MessageIcon = ({ width = '2.6rem', height = '2.6rem', className }) => (
  <svg
    className={className}
    width={width}
    height={height}
    viewBox="0 0 48 48"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2.17877 7.17357C2.50304 6.45894 3.21528 6 4.00003 6H44C44.713 6 45.372 6.37952 45.7299 6.99615C46.0877 7.61278 46.0902 8.37327 45.7365 8.99228L25.7365 43.9923C25.3423 44.6821 24.5772 45.0732 23.7872 44.9886C22.9972 44.9041 22.3321 44.3599 22.0929 43.6023L16.219 25.0017L2.49488 9.31701C1.97811 8.72642 1.85449 7.88819 2.17877 7.17357ZM20.377 24.8856L24.531 38.0397L40.5537 10H8.40757L18.3918 21.4106L30.1002 14.2054C30.5705 13.9159 31.1865 14.0626 31.4759 14.533L32.5241 16.2363C32.8136 16.7066 32.6669 17.3226 32.1966 17.612L20.377 24.8856Z"
    ></path>
  </svg>
);

export const InboxIcon = ({ width = '3.2rem', height = '3.2rem', className }) => (
  <svg
    className={className}
    width={width}
    height={height}
    viewBox="0 0 32 32"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M24.0362 21.3333H18.5243L15.9983 24.4208L13.4721 21.3333H7.96047L7.99557 8H24.0009L24.0362 21.3333ZM24.3705 23.3333H19.4721L17.2883 26.0026C16.6215 26.8176 15.3753 26.8176 14.7084 26.0026L12.5243 23.3333H7.62626C6.70407 23.3333 5.95717 22.5845 5.9596 21.6623L5.99646 7.66228C5.99887 6.74352 6.74435 6 7.66312 6H24.3333C25.2521 6 25.9975 6.7435 26 7.66224L26.0371 21.6622C26.0396 22.5844 25.2927 23.3333 24.3705 23.3333ZM12.6647 14C12.2965 14 11.998 14.2985 11.998 14.6667V15.3333C11.998 15.7015 12.2965 16 12.6647 16H19.3313C19.6995 16 19.998 15.7015 19.998 15.3333V14.6667C19.998 14.2985 19.6995 14 19.3313 14H12.6647Z"
    ></path>
  </svg>
);

export const SearchIcon = ({ width = '2.4rem', height = '2.4rem', className }) => (
  <svg
    className={className}
    width={width}
    height={height}
    viewBox="0 0 48 48"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M22 10C15.3726 10 10 15.3726 10 22C10 28.6274 15.3726 34 22 34C28.6274 34 34 28.6274 34 22C34 15.3726 28.6274 10 22 10ZM6 22C6 13.1634 13.1634 6 22 6C30.8366 6 38 13.1634 38 22C38 25.6974 36.7458 29.1019 34.6397 31.8113L43.3809 40.5565C43.7712 40.947 43.7712 41.5801 43.3807 41.9705L41.9665 43.3847C41.5759 43.7753 40.9426 43.7752 40.5521 43.3846L31.8113 34.6397C29.1019 36.7458 25.6974 38 22 38C13.1634 38 6 30.8366 6 22Z"
    ></path>
  </svg>
);

*/

Trong Layout/components/Header/index.js
/*
import { useEffect, useState } from 'react';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faCircleXmark,
  faSpinner,
  faEllipsisVertical,
  faEarthAsia,
  faCircleQuestion,
  faKeyboard,
  faUser,
  faCoins,
  faGear,
  faSignOut,
} from '@fortawesome/free-solid-svg-icons';
import 'tippy.js/dist/tippy.css';

import Tippy from '@tippyjs/react';
import HeadlessTippy from '@tippyjs/react/headless';
import 'tippy.js/dist/tippy.css';

import styles from './Header.module.scss';

import images from '~/assets/images';

import { Wrapper as PopperWrapper } from '~/components/Popper';

import AccountItem from '~/components/AccountItem';

import Button from '~/components/Button';

import Menu from '~/components/Popper/Menu';
import { InboxIcon, MessageIcon, SearchIcon, UploadIcon } from '~/components/Icons';

const cx = classNames.bind(styles);

const MENU_ITEMS = [
  {
    icon: <FontAwesomeIcon icon={faEarthAsia} />,
    title: 'English',
    children: {
      title: 'Language',
      data: [
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
          children: {
            title: 'Vùng Miềng',
            data: [
              {
                code: 'vin',
                title: 'Tiếng Việt Bắc',
              },
              {
                code: 'vis',
                title: 'Tiếng Việt Nam',
                children: {
                  title: 'Hướng',
                  data: [
                    {
                      code: 'visw',
                      title: 'Tiếng Việt Tây',
                    },
                    {
                      code: 'vise',
                      title: 'Tiếng Việt Đông',
                    },
                  ],
                },
              },
            ],
          },
        },
      ],
    },
  },
  {
    icon: <FontAwesomeIcon icon={faCircleQuestion} />,
    title: 'Feedback and Help',
    to: '/feedback',
  },
  {
    icon: <FontAwesomeIcon icon={faKeyboard} />,
    title: 'Keyboard Shortcuts',
  },
];

function Header() {
  const [searchResult, setSearchResult] = useState([]);

  const currentUser = true;

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([
        /*sau này sẽ gọi api nên giờ ẩn đi*/
      ]);
    }, 0);
  }, []);

  //Handle logic
  const handleMenuChange = (menuItem) => {
    switch (menuItem.type) {
      case 'Vietnamess':
        //Handle change language
        break;
      default:
    }
  };

  const userMenu = [
    {
      icon: <FontAwesomeIcon icon={faUser} />,
      title: 'View profile',
      to: '/@thanhmeo.18',
    },
    {
      icon: <FontAwesomeIcon icon={faCoins} />,
      title: 'Get coins',
      to: '/coins',
    },
    {
      icon: <FontAwesomeIcon icon={faGear} />,
      title: 'Setting',
      to: '/setting',
    },
    ...MENU_ITEMS,
    {
      icon: <FontAwesomeIcon icon={faSignOut} />,
      title: 'Log out',
      to: '/logout',
      separate: true,
    },
  ];

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <HeadlessTippy
          interactive
          visible={searchResult.length > 0}
          render={(attrs) => (
            <div className={cx('search-result')} tabIndex="-1" {...attrs}>
              <PopperWrapper>
                <h4 className={cx('search-title')}>Accounts</h4>
                <AccountItem />
                <AccountItem />
                <AccountItem />
                <AccountItem />
              </PopperWrapper>
            </div>
          )}
        >
          <div className={cx('search')}>
            <input placeholder="Search accounts and videos" spellCheck={false} />

            <button className={cx('clear-btn')}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>

            <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

            <button className={cx('search-btn')}>
              <SearchIcon />
            </button>
          </div>
        </HeadlessTippy>

        <div className={cx('actions')}>
          {currentUser ? (
            <>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <UploadIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Message" placement="bottom">
                <button className={cx('action-btn')}>
                  <MessageIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <InboxIcon />
                </button>
              </Tippy>
            </>
          ) : (
            <>
              <Button text>Upload</Button>
              <Button primary>Log in</Button>
            </>
          )}

          <Menu items={currentUser ? userMenu : MENU_ITEMS} onChange={handleMenuChange}>
            {currentUser ? (
              <img
                src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/33fd8341eec3c69dc34972b27738b860~c5_100x100.jpeg?x-expires=1682920800&x-signature=V%2B%2FvdiQnIJYhg%2Bjq7Nt3zij%2BGcQ%3D"
                className={cx('user-avatar')}
                alt=""
              />
            ) : (
              <button trigger="click" className={cx('more-btn')}>
                <FontAwesomeIcon icon={faEllipsisVertical} />
              </button>
            )}
          </Menu>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

Tạo component images
Trong components/Image/index.js
/*
import classNames from 'classnames';
import { useState, forwardRef } from 'react';
import images from '~/assets/images';
import styles from './Image.module.scss';

const Image = forwardRef(({ src, alt, className, fallback: customFallback = images.noImage, ...props }, ref) => {
  const [fallback, setFallback] = useState('');

  const handleError = () => {
    setFallback(customFallback);
  };

  return (
    <img
      className={classNames(styles.wrapper, className)}
      ref={ref}
      src={fallback || src}
      alt={alt}
      {...props}
      onError={handleError}
    />
  );
});

export default Image;

*/

Trong file components/Layout/components/Header/index.js:
/*
import { useEffect, useState } from 'react';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faCircleXmark,
  faSpinner,
  faEllipsisVertical,
  faEarthAsia,
  faCircleQuestion,
  faKeyboard,
  faUser,
  faCoins,
  faGear,
  faSignOut,
} from '@fortawesome/free-solid-svg-icons';
import 'tippy.js/dist/tippy.css';
import Tippy from '@tippyjs/react';
import HeadlessTippy from '@tippyjs/react/headless';
import 'tippy.js/dist/tippy.css';

import styles from './Header.module.scss';
import images from '~/assets/images';
import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';
import Button from '~/components/Button';
import Menu from '~/components/Popper/Menu';
import { InboxIcon, MessageIcon, SearchIcon, UploadIcon } from '~/components/Icons';
import Image from '~/components/Image';

const cx = classNames.bind(styles);

const MENU_ITEMS = [
  {
    icon: <FontAwesomeIcon icon={faEarthAsia} />,
    title: 'English',
    children: {
      title: 'Language',
      data: [
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
          children: {
            title: 'Vùng Miềng',
            data: [
              {
                code: 'vin',
                title: 'Tiếng Việt Bắc',
              },
              {
                code: 'vis',
                title: 'Tiếng Việt Nam',
                children: {
                  title: 'Hướng',
                  data: [
                    {
                      code: 'visw',
                      title: 'Tiếng Việt Tây',
                    },
                    {
                      code: 'vise',
                      title: 'Tiếng Việt Đông',
                    },
                  ],
                },
              },
            ],
          },
        },
      ],
    },
  },
  {
    icon: <FontAwesomeIcon icon={faCircleQuestion} />,
    title: 'Feedback and Help',
    to: '/feedback',
  },
  {
    icon: <FontAwesomeIcon icon={faKeyboard} />,
    title: 'Keyboard Shortcuts',
  },
];

function Header() {
  const [searchResult, setSearchResult] = useState([]);

  const currentUser = true;

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([
        /*sau này sẽ gọi api nên giờ ẩn đi*/
      ]);
    }, 0);
  }, []);

  //Handle logic
  const handleMenuChange = (menuItem) => {
    switch (menuItem.type) {
      case 'Vietnamess':
        //Handle change language
        break;
      default:
    }
  };

  const userMenu = [
    {
      icon: <FontAwesomeIcon icon={faUser} />,
      title: 'View profile',
      to: '/@thanhmeo.18',
    },
    {
      icon: <FontAwesomeIcon icon={faCoins} />,
      title: 'Get coins',
      to: '/coins',
    },
    {
      icon: <FontAwesomeIcon icon={faGear} />,
      title: 'Setting',
      to: '/setting',
    },
    ...MENU_ITEMS,
    {
      icon: <FontAwesomeIcon icon={faSignOut} />,
      title: 'Log out',
      to: '/logout',
      separate: true,
    },
  ];

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <HeadlessTippy
          interactive
          visible={searchResult.length > 0}
          render={(attrs) => (
            <div className={cx('search-result')} tabIndex="-1" {...attrs}>
              <PopperWrapper>
                <h4 className={cx('search-title')}>Accounts</h4>
                <AccountItem />
                <AccountItem />
                <AccountItem />
                <AccountItem />
              </PopperWrapper>
            </div>
          )}
        >
          <div className={cx('search')}>
            <input placeholder="Search accounts and videos" spellCheck={false} />

            <button className={cx('clear-btn')}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>

            <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

            <button className={cx('search-btn')}>
              <SearchIcon />
            </button>
          </div>
        </HeadlessTippy>

        <div className={cx('actions')}>
          {currentUser ? (
            <>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <UploadIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Message" placement="bottom">
                <button className={cx('action-btn')}>
                  <MessageIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <InboxIcon />
                </button>
              </Tippy>
            </>
          ) : (
            <>
              <Button text>Upload</Button>
              <Button primary>Log in</Button>
            </>
          )}

          <Menu items={currentUser ? userMenu : MENU_ITEMS} onChange={handleMenuChange}>
            {currentUser ? (
              <Image
                src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/33fd8341eec3c69dc34972b27738b860~c5_100x100.jpeg?x-expires=1682920800&x-signature=V%2B%2FvdiQnIJYhg%2Bjq7Nt3zij%2BGcQ%3D"
                className={cx('user-avatar')}
                alt="ThaoHentai"
                //fallback="http://files.fullstack.edu.vn/user_avatars/623b4b2d95cec.png"
              />
            ) : (
              <button trigger="click" className={cx('more-btn')}>
                <FontAwesomeIcon icon={faEllipsisVertical} />
              </button>
            )}
          </Menu>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

Trong asset/images/index.js:
/*
const images = {
  logo: require('~/assets/images/logo.svg').default,
  noImage: require('~/assets/images/no-image.png'),
};

export default images;

*/

Trong asset/images/Image.module.scss:
/*
.wrapper {
  overflow: hidden;
}

*/
______________________________
Xây dựng Logic phần Header #1

Trong components/Layout/components/Header/index.js:
/*
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faEllipsisVertical,
  faEarthAsia,
  faCircleQuestion,
  faKeyboard,
  faUser,
  faCoins,
  faGear,
  faSignOut,
} from '@fortawesome/free-solid-svg-icons';
import 'tippy.js/dist/tippy.css';
import Tippy from '@tippyjs/react';
import 'tippy.js/dist/tippy.css';

import styles from './Header.module.scss';
import images from '~/assets/images';
import Button from '~/components/Button';
import Menu from '~/components/Popper/Menu';
import { InboxIcon, MessageIcon, UploadIcon } from '~/components/Icons';
import Image from '~/components/Image';
import Search from '../Search';

const cx = classNames.bind(styles);

const MENU_ITEMS = [
  {
    icon: <FontAwesomeIcon icon={faEarthAsia} />,
    title: 'English',
    children: {
      title: 'Language',
      data: [
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
          children: {
            title: 'Vùng Miềng',
            data: [
              {
                code: 'vin',
                title: 'Tiếng Việt Bắc',
              },
              {
                code: 'vis',
                title: 'Tiếng Việt Nam',
                children: {
                  title: 'Hướng',
                  data: [
                    {
                      code: 'visw',
                      title: 'Tiếng Việt Tây',
                    },
                    {
                      code: 'vise',
                      title: 'Tiếng Việt Đông',
                    },
                  ],
                },
              },
            ],
          },
        },
      ],
    },
  },
  {
    icon: <FontAwesomeIcon icon={faCircleQuestion} />,
    title: 'Feedback and Help',
    to: '/feedback',
  },
  {
    icon: <FontAwesomeIcon icon={faKeyboard} />,
    title: 'Keyboard Shortcuts',
  },
];

function Header() {
  const currentUser = true;

  //Handle logic
  const handleMenuChange = (menuItem) => {
    switch (menuItem.type) {
      case 'Vietnamess':
        //Handle change language
        break;
      default:
    }
  };

  const userMenu = [
    {
      icon: <FontAwesomeIcon icon={faUser} />,
      title: 'View profile',
      to: '/@thanhmeo.18',
    },
    {
      icon: <FontAwesomeIcon icon={faCoins} />,
      title: 'Get coins',
      to: '/coins',
    },
    {
      icon: <FontAwesomeIcon icon={faGear} />,
      title: 'Setting',
      to: '/setting',
    },
    ...MENU_ITEMS,
    {
      icon: <FontAwesomeIcon icon={faSignOut} />,
      title: 'Log out',
      to: '/logout',
      separate: true,
    },
  ];

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>

        <Search />

        <div className={cx('actions')}>
          {currentUser ? (
            <>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <UploadIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Message" placement="bottom">
                <button className={cx('action-btn')}>
                  <MessageIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <InboxIcon />
                </button>
              </Tippy>
            </>
          ) : (
            <>
              <Button text>Upload</Button>
              <Button primary>Log in</Button>
            </>
          )}

          <Menu items={currentUser ? userMenu : MENU_ITEMS} onChange={handleMenuChange}>
            {currentUser ? (
              <Image
                src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/33fd8341eec3c69dc34972b27738b860~c5_100x100.jpeg?x-expires=1682920800&x-signature=V%2B%2FvdiQnIJYhg%2Bjq7Nt3zij%2BGcQ%3D"
                className={cx('user-avatar')}
                alt="ThaoHentai"
                //fallback="http://files.fullstack.edu.vn/user_avatars/623b4b2d95cec.png"
              />
            ) : (
              <button trigger="click" className={cx('more-btn')}>
                <FontAwesomeIcon icon={faEllipsisVertical} />
              </button>
            )}
          </Menu>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

Trong components/AcCountItem/index.js:
/*
import classNames from 'classnames/bind';
import styles from './AccountItem.module.scss';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle } from '@fortawesome/free-solid-svg-icons';

import Image from '~/components/Image';

const cx = classNames.bind(styles);

function AccountItem() {
  return (
    <div className={cx('wrapper')}>
      <Image
        className={cx('avatar')}
        src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/4abd3d07ddea0f1c636aec1bba9cf997~c5_100x100.jpeg?x-expires=1682524800&x-signature=7L6g4kvIdlbeqZBQAkzAKSg4iOA%3D"
        alt="Roisee"
      />
      <div className={cx('info')}>
        <h4 className={cx('name')}>
          <span>Roisee</span>
          <FontAwesomeIcon className={cx('check')} icon={faCheckCircle} />
        </h4>
        <span className={cx('username')}>Hoàng Thị Hằng Phượng</span>
      </div>
    </div>
  );
}

export default AccountItem;

*/

Tạo thêm 1 file components/Layout/components/Search/index.js:
/*
import { useEffect, useState, useRef } from 'react';
import { faCircleXmark, faSpinner } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import HeadlessTippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';
import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';
import { SearchIcon } from '~/components/Icons';
import styles from './Search.module.scss';

const cx = classNames.bind(styles);

function Search() {
  const [searchValue, setSearchValue] = useState('');

  const [searchResult, setSearchResult] = useState([]);

  const [showResult, setshowResult] = useState(true);

  const inputRef = useRef();

  useEffect(() => {
    setTimeout(() => {
      setSearchResult([
        1, 1, 2,
        /*sau này sẽ gọi api nên giờ ẩn đi*/
      ]);
    }, 0);
  }, []);

  const handleClear = () => {
    setSearchValue('');
    setSearchResult([]);
    inputRef.current.focus();
  };

  const handleHideResult = () => {
    setshowResult(false);
  };

  return (
    <HeadlessTippy
      interactive
      visible={showResult && searchResult.length > 0}
      render={(attrs) => (
        <div className={cx('search-result')} tabIndex="-1" {...attrs}>
          <PopperWrapper>
            <h4 className={cx('search-title')}>Accounts</h4>
            <AccountItem />
            <AccountItem />
            <AccountItem />
            <AccountItem />
          </PopperWrapper>
        </div>
      )}
      onClickOutside={handleHideResult}
    >
      <div className={cx('search')}>
        <input
          ref={inputRef}
          value={searchValue}
          placeholder="Search accounts and videos"
          spellCheck={false}
          onChange={(e) => setSearchValue(e.target.value)}
          onFocus={() => setshowResult(true)}
        />

        {!!searchValue && (
          <button className={cx('clear-btn')} onClick={handleClear}>
            <FontAwesomeIcon icon={faCircleXmark} />
          </button>
        )}

        <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />

        <button className={cx('search-btn')}>
          <SearchIcon />
        </button>
      </div>
    </HeadlessTippy>
  );
}

export default Search;

*/

Tạo thêm 1 file components/Layout/components/Search/Search.module.scss:
/*
.search,
.search-result {
  width: 361px;
}

.search {
  position: relative;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.search-title {
  padding: 5px 12px;
  font-size: 1.4rem;
  font-weight: 500;
  color: rgba(22, 24, 35, 0.5);
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

*/

______________________________
Xây dựng Logic phần Header #2 - call api

Các kiên sthuwcs cần lưu ý:
- Promise
- Fetch api
- RESTful api
- json

> Tham khảo khóa học JS của F* lại

> API search users:
http://tiktok.fullstack.edu.vn/api/users/search?q=Roisee&tpe=less

Trong components/Layout/components/Search/index.js:
/*
import { useEffect, useState, useRef } from 'react';
import { faCircleXmark, faSpinner } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import HeadlessTippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';
import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';
import { SearchIcon } from '~/components/Icons';
import styles from './Search.module.scss';

const cx = classNames.bind(styles);

function Search() {
  const [searchValue, setSearchValue] = useState('');

  const [searchResult, setSearchResult] = useState([]);

  const [showResult, setshowResult] = useState(true);
  const [loading, setloading] = useState(false);

  const inputRef = useRef();

  useEffect(() => {
    if (!searchValue.trim()) {
      setSearchResult([]);
      return;
    }

    setloading(true);

    fetch(`https://tiktok.fullstack.edu.vn/api/users/search?q=${encodeURIComponent(searchValue)}&type=less`)
      .then((res) => res.json())
      .then((res) => {
        setSearchResult(res.data);
        setloading(false);
      })
      .catch(() => {
        setloading(false);
      });
  }, [searchValue]);

  const handleClear = () => {
    setSearchValue('');
    setSearchResult([]);
    inputRef.current.focus();
  };

  const handleHideResult = () => {
    setshowResult(false);
  };

  return (
    <HeadlessTippy
      interactive
      visible={showResult && searchResult.length > 0}
      render={(attrs) => (
        <div className={cx('search-result')} tabIndex="-1" {...attrs}>
          <PopperWrapper>
            <h4 className={cx('search-title')}>Accounts</h4>
            {searchResult.map((result) => (
              <AccountItem key={result.id} data={result} />
            ))}
          </PopperWrapper>
        </div>
      )}
      onClickOutside={handleHideResult}
    >
      <div className={cx('search')}>
        <input
          ref={inputRef}
          value={searchValue}
          placeholder="Search accounts and videos"
          spellCheck={false}
          onChange={(e) => setSearchValue(e.target.value)}
          onFocus={() => setshowResult(true)}
        />

        {!!searchValue && !loading && (
          <button className={cx('clear-btn')} onClick={handleClear}>
            <FontAwesomeIcon icon={faCircleXmark} />
          </button>
        )}

        {loading && <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />}

        <button className={cx('search-btn')}>
          <SearchIcon />
        </button>
      </div>
    </HeadlessTippy>
  );
}

export default Search;

*/

Trong components/AccountItem/index.js:
/*
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle } from '@fortawesome/free-solid-svg-icons';
import { Link } from 'react-router-dom';

import styles from './AccountItem.module.scss';
import Image from '~/components/Image';

const cx = classNames.bind(styles);

function AccountItem({ data }) {
  return (
    <Link to={`/:${data.nickname}`} className={cx('wrapper')}>
      <Image className={cx('avatar')} src={data.avatar} alt={data.full_name} />
      <div className={cx('info')}>
        <h4 className={cx('name')}>
          <span>{data.full_name}</span>
          {data.tick && <FontAwesomeIcon className={cx('check')} icon={faCheckCircle} />}
        </h4>
        <span className={cx('username')}>{data.nickname}</span>
      </div>
    </Link>
  );
}

export default AccountItem;

*/

Trong components/Layout/components/Search/Search.module.scss:
/*
.search,
.search-result {
  width: 361px;
}

.search {
  position: relative;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.search-title {
  padding: 5px 12px;
  font-size: 1.4rem;
  font-weight: 500;
  color: rgba(22, 24, 35, 0.5);
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.loading {
  animation: spinner 1s linear infinite;
}

@keyframes spinner {
  from {
    transform: translateY(-50%) rotate(0deg);
  }
  to {
    transform: translateY(-50%) rotate(360deg);
  }
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

*/

Trong routes/index.js:
/*
//Layout
import { HeaderOnly } from '~/components/Layout';

//Pages
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';
import Upload from '~/pages/Upload';
import Search from '~/pages/Search';

const publicRoutes = [
  { path: '/', component: Home },
  { path: '/following', component: Following },
  { path: '/:nickname', component: Profile },
  { path: '/upload', component: Upload, layout: HeaderOnly },
  { path: '/search', component: Search, layout: null },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };

*/

____________________________________
Xây dựng Logic phần Header #3

Trong src/hook/useDebounce.js:
/*
import { useState, useEffect } from 'react';

function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);

    return () => clearTimeout(handler);

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value]);

  return debouncedValue;
}

export default useDebounce;

*/

Trong src/hook/index.js:
/*
export { default as useDebounce } from './useDebounce';

*/

Trong components/Layout/components/Search/index.js:
/*
import { useEffect, useState, useRef } from 'react';
import { faCircleXmark, faSpinner } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import HeadlessTippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';
import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';
import { SearchIcon } from '~/components/Icons';
import { useDebounce } from '~/hook';
import styles from './Search.module.scss';

const cx = classNames.bind(styles);

function Search() {
  const [searchValue, setSearchValue] = useState('');

  const [searchResult, setSearchResult] = useState([]);

  const [showResult, setshowResult] = useState(true);
  const [loading, reloading] = useState(false);

  const debounced = useDebounce(searchValue, 800);

  const inputRef = useRef();

  useEffect(() => {
    if (!debounced.trim()) {
      setSearchResult([]);
      return;
    }

    reloading(true);

    fetch(`https://tiktok.fullstack.edu.vn/api/users/search?q=${encodeURIComponent(debounced)}&type=less`)
      .then((res) => res.json())
      .then((res) => {
        setSearchResult(res.data);
        reloading(false);
      })
      .catch(() => {
        reloading(false);
      });
  }, [debounced]);

  const handleClear = () => {
    setSearchValue('');
    setSearchResult([]);
    inputRef.current.focus();
  };

  const handleHideResult = () => {
    setshowResult(false);
  };

  return (
    <HeadlessTippy
      interactive
      visible={showResult && searchResult.length > 0}
      render={(attrs) => (
        <div className={cx('search-result')} tabIndex="-1" {...attrs}>
          <PopperWrapper>
            <h4 className={cx('search-title')}>Accounts</h4>
            {searchResult.map((result) => (
              <AccountItem key={result.id} data={result} />
            ))}
          </PopperWrapper>
        </div>
      )}
      onClickOutside={handleHideResult}
    >
      <div className={cx('search')}>
        <input
          ref={inputRef}
          value={searchValue}
          placeholder="Search accounts and videos"
          spellCheck={false}
          onChange={(e) => setSearchValue(e.target.value)}
          onFocus={() => setshowResult(true)}
        />

        {!!searchValue && !loading && (
          <button className={cx('clear-btn')} onClick={handleClear}>
            <FontAwesomeIcon icon={faCircleXmark} />
          </button>
        )}

        {loading && <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />}

        <button className={cx('search-btn')}>
          <SearchIcon />
        </button>
      </div>
    </HeadlessTippy>
  );
}

export default Search;

*/

_________________________
Tìm hiểu và sử dụng thư viện Axios or superagent

Giúp gọi API từ trình duyệt hoặc từ Node.js

Có 2 cách gọi Api khi viết js trên frontend
//XMLHttpReques
//fetch

cài đặt axios: npm install axios

Trong components/Layout/components/Search/index.js:
/*
import { useEffect, useState, useRef } from 'react';
import { faCircleXmark, faSpinner } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import HeadlessTippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import * as searchService from '~/apiService/searchServices';
import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';
import { SearchIcon } from '~/components/Icons';
import { useDebounce } from '~/hook';
import styles from './Search.module.scss';

const cx = classNames.bind(styles);

function Search() {
  const [searchValue, setSearchValue] = useState('');

  const [searchResult, setSearchResult] = useState([]);

  const [showResult, setshowResult] = useState(true);
  const [loading, reloading] = useState(false);

  const debounced = useDebounce(searchValue, 800);

  const inputRef = useRef();

  useEffect(() => {
    if (!debounced.trim()) {
      setSearchResult([]);
      return;
    }

    const fetchApi = async () => {
      reloading(true);

      const result = await searchService.search(debounced);
      setSearchResult(result);

      reloading(false);
    };

    fetchApi();

    /*
    reloading(true);

    const fetchApi = async () => {
      try {
        const res = await request.get('users/search', {
          params: {
            q: debounced,
            type: 'less',
          },
        });
        setSearchResult(res.data);
        reloading(false);
      } catch (error) {
        reloading(false);
      }
    };

    fetchApi();*/
  }, [debounced]);

  /*fetch(`https://tiktok.fullstack.edu.vn/api/users/search?q=${encodeURIComponent(debounced)}&type=less`)
      .then((res) => res.json())
      .then((res) => {
        setSearchResult(res.data);
        reloading(false);
      })
      .catch(() => {
        reloading(false);
      });
  }, [debounced]);*/

  /*request
      .get('users/search', {
        params: {
          q: debounced,
          type: 'less',
        },
      })
      .then((res) => {
        setSearchResult(res.data);
        reloading(false);
      })
      .catch(() => {
        reloading(false);
      });
  }, [debounced]);*/

  const handleClear = () => {
    setSearchValue('');
    setSearchResult([]);
    inputRef.current.focus();
  };

  const handleHideResult = () => {
    setshowResult(false);
  };

  return (
    <HeadlessTippy
      interactive
      visible={showResult && searchResult.length > 0}
      render={(attrs) => (
        <div className={cx('search-result')} tabIndex="-1" {...attrs}>
          <PopperWrapper>
            <h4 className={cx('search-title')}>Accounts</h4>
            {searchResult.map((result) => (
              <AccountItem key={result.id} data={result} />
            ))}
          </PopperWrapper>
        </div>
      )}
      onClickOutside={handleHideResult}
    >
      <div className={cx('search')}>
        <input
          ref={inputRef}
          value={searchValue}
          placeholder="Search accounts and videos"
          spellCheck={false}
          onChange={(e) => setSearchValue(e.target.value)}
          onFocus={() => setshowResult(true)}
        />

        {!!searchValue && !loading && (
          <button className={cx('clear-btn')} onClick={handleClear}>
            <FontAwesomeIcon icon={faCircleXmark} />
          </button>
        )}

        {loading && <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />}

        <button className={cx('search-btn')}>
          <SearchIcon />
        </button>
      </div>
    </HeadlessTippy>
  );
}

export default Search;

*/

Trong src/utils/request.js:
/*
import axios from 'axios';

const request = axios.create({
  baseURL: 'https://tiktok.fullstack.edu.vn/api/',
});

export const get = async (path, option = {}) => {
  const response = await request.get(path, option);
  return response.data;
};

export default request;

*/

Trong src/apiService/searchServices.js
/*
import * as request from '~/utils/request';

export const search = async (q, type = 'less') => {
  try {
    const res = await request.get('users/search', {
      params: {
        q,
        type,
      },
    });
    return res.data;
  } catch (error) {
    console.log(error);
  }
};

*/

____________________________________
Sửa lỗi và hoàn thiện phần Header #1

- link logo về trang chủ
- sửa font chữ trong ô tìm kiếm
- không cho nhập kí tự đầu tiên là space trong ô tìm kiếm
- bỏ qua hành vi focus vào ô tìm kiếm khi nhấn submit
- không ẩn menu khi click vào avatar
- xử lý thanh cuộn trong menu đa cấp, khi có nhiều content
- thêm style ovarlay cho thanh cuộn body
- sửa title trang và update favicon
- fix warning thư viện Tippy

trong components/layout/components/Header/index.js
/*
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faEllipsisVertical,
  faEarthAsia,
  faCircleQuestion,
  faKeyboard,
  faUser,
  faCoins,
  faGear,
  faSignOut,
} from '@fortawesome/free-solid-svg-icons';
import { Link } from 'react-router-dom';
import 'tippy.js/dist/tippy.css';
import Tippy from '@tippyjs/react';
import 'tippy.js/dist/tippy.css';

import routesConfig from '~/config/routes';
import styles from './Header.module.scss';
import images from '~/assets/images';
import Button from '~/components/Button';
import Menu from '~/components/Popper/Menu';
import { InboxIcon, MessageIcon, UploadIcon } from '~/components/Icons';
import Image from '~/components/Image';
import Search from '../Search';

const cx = classNames.bind(styles);

const MENU_ITEMS = [
  {
    icon: <FontAwesomeIcon icon={faEarthAsia} />,
    title: 'English',
    children: {
      title: 'Language',
      data: [
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
          children: {
            title: 'Vùng Miềng',
            data: [
              {
                code: 'vin',
                title: 'Tiếng Việt Bắc',
              },
              {
                code: 'vis',
                title: 'Tiếng Việt Nam',
                children: {
                  title: 'Hướng',
                  data: [
                    {
                      code: 'visw',
                      title: 'Tiếng Việt Tây',
                    },
                    {
                      code: 'vise',
                      title: 'Tiếng Việt Đông',
                    },
                  ],
                },
              },
            ],
          },
        },
      ],
    },
  },
  {
    icon: <FontAwesomeIcon icon={faCircleQuestion} />,
    title: 'Feedback and Help',
    to: '/feedback',
  },
  {
    icon: <FontAwesomeIcon icon={faKeyboard} />,
    title: 'Keyboard Shortcuts',
  },
];

function Header() {
  const currentUser = true;

  //Handle logic
  const handleMenuChange = (menuItem) => {
    switch (menuItem.type) {
      case 'Vietnamess':
        //Handle change language
        break;
      default:
    }
  };

  const userMenu = [
    {
      icon: <FontAwesomeIcon icon={faUser} />,
      title: 'View profile',
      to: '/@thanhmeo.18',
    },
    {
      icon: <FontAwesomeIcon icon={faCoins} />,
      title: 'Get coins',
      to: '/coins',
    },
    {
      icon: <FontAwesomeIcon icon={faGear} />,
      title: 'Setting',
      to: '/setting',
    },
    ...MENU_ITEMS,
    {
      icon: <FontAwesomeIcon icon={faSignOut} />,
      title: 'Log out',
      to: '/logout',
      separate: true,
    },
  ];

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <Link to={routesConfig.home} className={cx('logo-link')}>
          <img src={images.logo} alt="TikTok" />
        </Link>

        <Search />

        <div className={cx('actions')}>
          {currentUser ? (
            <>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <UploadIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Message" placement="bottom">
                <button className={cx('action-btn')}>
                  <MessageIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <InboxIcon />
                </button>
              </Tippy>
            </>
          ) : (
            <>
              <Button text>Upload</Button>
              <Button primary>Log in</Button>
            </>
          )}

          <Menu items={currentUser ? userMenu : MENU_ITEMS} onChange={handleMenuChange}>
            {currentUser ? (
              <Image
                src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/33fd8341eec3c69dc34972b27738b860~c5_100x100.jpeg?x-expires=1682920800&x-signature=V%2B%2FvdiQnIJYhg%2Bjq7Nt3zij%2BGcQ%3D"
                className={cx('user-avatar')}
                alt="ThaoHentai"
                //fallback="http://files.fullstack.edu.vn/user_avatars/623b4b2d95cec.png"
              />
            ) : (
              <button trigger="click" className={cx('more-btn')}>
                <FontAwesomeIcon icon={faEllipsisVertical} />
              </button>
            )}
          </Menu>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

trong components/layout/components/Header/Header.module.scss
/*
.wrapper {
  --search-border-radius: 92px;
  --search-height: 46px;
  --search-top-spacer: 9px;
  --search-button-width: 52px;

  width: 100%;
  height: var(--default-layout-header-height, 60px);
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: var(--default-layout-width-content);
  padding: 0 var(--default-layout-horizontal-spacer);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo-link {
  display: flex;
}

//Actions
.actions {
  display: flex;
  align-items: center;
}

.more-btn {
  font-size: 2rem;
  margin-left: 28px;
  padding: 4px 8px;
  background-color: transparent;
  cursor: pointer;
}

.action-btn {
  font-size: 2.2rem;
  color: #161823;
  background-color: transparent;
  padding: 4px 12px;
  cursor: pointer;
}

.user-avatar {
  width: 32px;
  height: 32px;
  object-fit: cover;
  border-radius: 50%;
  margin-left: 12px;
  cursor: pointer;
}

*/

Trong scr/config/routes.js:
/*
const routes = {
  home: '/',
  following: '/following',
  profile: '/:nickname',
  upload: '/upload',
  search: '/search',
};

export default routes;

*/

trong src/routes/index.js:
/*
import routesConfig from '~/config/routes';

//Layout
import { HeaderOnly } from '~/components/Layout';

//Pages
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';
import Upload from '~/pages/Upload';
import Search from '~/pages/Search';

const publicRoutes = [
  { path: routesConfig.home, component: Home },
  { path: routesConfig.following, component: Following },
  { path: routesConfig.profile, component: Profile },
  { path: routesConfig.upload, component: Upload, layout: HeaderOnly },
  { path: routesConfig.search, component: Search, layout: null },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };

*/

Trong components/Layout/components/Search/index.js:
/*
import { useEffect, useState, useRef } from 'react';
import { faCircleXmark, faSpinner } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import HeadlessTippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import * as searchService from '~/apiService/searchServices';
import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';
import { SearchIcon } from '~/components/Icons';
import { useDebounce } from '~/hook';
import styles from './Search.module.scss';

const cx = classNames.bind(styles);

function Search() {
  const [searchValue, setSearchValue] = useState('');

  const [searchResult, setSearchResult] = useState([]);

  const [showResult, setshowResult] = useState(true);
  const [loading, reloading] = useState(false);

  const debounced = useDebounce(searchValue, 800);

  const inputRef = useRef();

  useEffect(() => {
    if (!debounced.trim()) {
      setSearchResult([]);
      return;
    }

    const fetchApi = async () => {
      reloading(true);

      const result = await searchService.search(debounced);
      setSearchResult(result);

      reloading(false);
    };

    fetchApi();

    /*
    reloading(true);

    const fetchApi = async () => {
      try {
        const res = await request.get('users/search', {
          params: {
            q: debounced,
            type: 'less',
          },
        });
        setSearchResult(res.data);
        reloading(false);
      } catch (error) {
        reloading(false);
      }
    };

    fetchApi();*/
  }, [debounced]);

  /*fetch(`https://tiktok.fullstack.edu.vn/api/users/search?q=${encodeURIComponent(debounced)}&type=less`)
      .then((res) => res.json())
      .then((res) => {
        setSearchResult(res.data);
        reloading(false);
      })
      .catch(() => {
        reloading(false);
      });
  }, [debounced]);*/

  /*request
      .get('users/search', {
        params: {
          q: debounced,
          type: 'less',
        },
      })
      .then((res) => {
        setSearchResult(res.data);
        reloading(false);
      })
      .catch(() => {
        reloading(false);
      });
  }, [debounced]);*/

  const handleClear = () => {
    setSearchValue('');
    setSearchResult([]);
    inputRef.current.focus();
  };

  const handleHideResult = () => {
    setshowResult(false);
  };

  const handleChange = (e) => {
    const searchValue = e.target.value;

    if (!searchValue.startsWith(' ')) {
      setSearchValue(searchValue);
    }
  };

  return (
    <HeadlessTippy
      interactive
      visible={showResult && searchResult.length > 0}
      render={(attrs) => (
        <div className={cx('search-result')} tabIndex="-1" {...attrs}>
          <PopperWrapper>
            <h4 className={cx('search-title')}>Accounts</h4>
            {searchResult.map((result) => (
              <AccountItem key={result.id} data={result} />
            ))}
          </PopperWrapper>
        </div>
      )}
      onClickOutside={handleHideResult}
    >
      <div className={cx('search')}>
        <input
          ref={inputRef}
          value={searchValue}
          placeholder="Search accounts and videos"
          spellCheck={false}
          onChange={handleChange}
          onFocus={() => setshowResult(true)}
        />

        {!!searchValue && !loading && (
          <button className={cx('clear-btn')} onClick={handleClear}>
            <FontAwesomeIcon icon={faCircleXmark} />
          </button>
        )}

        {loading && <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />}

        <button className={cx('search-btn')} onMouseDown={(e) => e.preventDefault()}>
          <SearchIcon />
        </button>
      </div>
    </HeadlessTippy>
  );
}

export default Search;

*/

Trong file components/Layout/components/Search/Search.module.scss:
/*
.search,
.search-result {
  width: 361px;
}

.search {
  position: relative;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
    font-family: var(--font-family);
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.search-title {
  padding: 5px 12px;
  font-size: 1.4rem;
  font-weight: 500;
  color: rgba(22, 24, 35, 0.5);
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.loading {
  animation: spinner 1s linear infinite;
}

@keyframes spinner {
  from {
    transform: translateY(-50%) rotate(0deg);
  }
  to {
    transform: translateY(-50%) rotate(360deg);
  }
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

*/

Trong components/Propper/Menu/index.js:
/*
import Tippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import MenuItem from './MenuItem';
import styles from './Menu.module.scss';
import Header from './Header';
import { useState } from 'react';

const cx = classNames.bind(styles);

const defaultFn = () => {};

function Menu({ children, items = [], hideOnClick = false, onChange = defaultFn }) {
  const [history, setHistory] = useState([{ data: items }]);
  const current = history[history.length - 1];

  const renderItems = () => {
    return current.data.map((item, index) => {
      const isParent = !!item.children;

      return (
        <MenuItem
          key={index}
          data={item}
          onClick={() => {
            if (isParent) {
              setHistory((prev) => [...prev, item.children]);
            } else {
              onChange(item);
            }
          }}
        />
      );
    });
  };

  return (
    <Tippy
      interactive
      delay={[0, 700]}
      offset={[12, 8]}
      hideOnClick={hideOnClick}
      placement="bottom-end"
      render={(attrs) => (
        <div className={cx('menu-list')} tabIndex="-1" {...attrs}>
          <PopperWrapper className={cx('menu-popper')}>
            {history.length > 1 && (
              <Header
                title="Language"
                onBack={() => {
                  setHistory((prev) => prev.slice(0, prev.length - 1));
                }}
              />
            )}
            {renderItems()}
          </PopperWrapper>
        </div>
      )}
      onHide={() => setHistory((prev) => prev.slice(0, 1))}
    >
      {children}
    </Tippy>
  );
}

export default Menu;

*/

_________________________
Sửa lỗi và hoàn thiện phần Header #2 

trong components/Layout/components/Header/index.js
/*
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faEllipsisVertical,
  faEarthAsia,
  faCircleQuestion,
  faKeyboard,
  faUser,
  faCoins,
  faGear,
  faSignOut,
} from '@fortawesome/free-solid-svg-icons';
import { Link } from 'react-router-dom';
import 'tippy.js/dist/tippy.css';
import Tippy from '@tippyjs/react';
import 'tippy.js/dist/tippy.css';

import routesConfig from '~/config/routes';
import styles from './Header.module.scss';
import images from '~/assets/images';
import Button from '~/components/Button';
import Menu from '~/components/Popper/Menu';
import { InboxIcon, MessageIcon, UploadIcon } from '~/components/Icons';
import Image from '~/components/Image';
import Search from '../Search';

const cx = classNames.bind(styles);

const MENU_ITEMS = [
  {
    icon: <FontAwesomeIcon icon={faEarthAsia} />,
    title: 'English',
    children: {
      title: 'Language',
      data: [
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
          children: {
            title: 'Vùng Miềng',
            data: [
              {
                code: 'vin',
                title: 'Tiếng Việt Bắc',
              },
              {
                code: 'vis',
                title: 'Tiếng Việt Nam',
              },
            ],
          },
        },
        {
          type: 'tiếng nhật',
          code: 'JP',
          title: 'Japaness',
        },
        {
          type: 'tiếng trung',
          code: 'cn',
          title: 'Tàu Khựa',
        },
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
        },
        {
          type: 'tiếng nhật',
          code: 'JP',
          title: 'Japaness',
        },
        {
          type: 'tiếng trung',
          code: 'cn',
          title: 'Tàu Khựa',
        },
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
        },
        {
          type: 'tiếng nhật',
          code: 'JP',
          title: 'Japaness',
        },
        {
          type: 'tiếng trung',
          code: 'cn',
          title: 'Tàu Khựa',
        },
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
        },
        {
          type: 'tiếng nhật',
          code: 'JP',
          title: 'Japaness',
        },
        {
          type: 'tiếng trung',
          code: 'cn',
          title: 'Tàu Khựa',
        },
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
        },
        {
          type: 'tiếng nhật',
          code: 'JP',
          title: 'Japaness',
        },
        {
          type: 'tiếng trung',
          code: 'cn',
          title: 'Tàu Khựa',
        },
        {
          type: 'tiếng anh',
          code: 'en',
          title: 'English',
        },
        {
          type: 'Vietnamess',
          code: 'vi',
          title: 'Tiếng Việt',
        },
      ],
    },
  },
  {
    icon: <FontAwesomeIcon icon={faCircleQuestion} />,
    title: 'Feedback and Help',
    to: '/feedback',
  },
  {
    icon: <FontAwesomeIcon icon={faKeyboard} />,
    title: 'Keyboard Shortcuts',
  },
];

function Header() {
  const currentUser = true;

  //Handle logic
  const handleMenuChange = (menuItem) => {
    switch (menuItem.type) {
      case 'Vietnamess':
        //Handle change language
        break;
      default:
    }
  };

  const userMenu = [
    {
      icon: <FontAwesomeIcon icon={faUser} />,
      title: 'View profile',
      to: '/@thanhmeo.18',
    },
    {
      icon: <FontAwesomeIcon icon={faCoins} />,
      title: 'Get coins',
      to: '/coins',
    },
    {
      icon: <FontAwesomeIcon icon={faGear} />,
      title: 'Setting',
      to: '/setting',
    },
    ...MENU_ITEMS,
    {
      icon: <FontAwesomeIcon icon={faSignOut} />,
      title: 'Log out',
      to: '/logout',
      separate: true,
    },
  ];

  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <Link to={routesConfig.home} className={cx('logo-link')}>
          <img src={images.logo} alt="TikTok" />
        </Link>

        <Search />

        <div className={cx('actions')}>
          {currentUser ? (
            <>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <UploadIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Message" placement="bottom">
                <button className={cx('action-btn')}>
                  <MessageIcon />
                </button>
              </Tippy>
              <Tippy delay={[0, 200]} content="Upload Video" placement="bottom">
                <button className={cx('action-btn')}>
                  <InboxIcon />
                </button>
              </Tippy>
            </>
          ) : (
            <>
              <Button text>Upload</Button>
              <Button primary>Log in</Button>
            </>
          )}

          <Menu items={currentUser ? userMenu : MENU_ITEMS} onChange={handleMenuChange}>
            {currentUser ? (
              <Image
                src="https://p16-sign-va.tiktokcdn.com/tos-useast2a-avt-0068-giso/33fd8341eec3c69dc34972b27738b860~c5_100x100.jpeg?x-expires=1682920800&x-signature=V%2B%2FvdiQnIJYhg%2Bjq7Nt3zij%2BGcQ%3D"
                className={cx('user-avatar')}
                alt="ThaoHentai"
                //fallback="http://files.fullstack.edu.vn/user_avatars/623b4b2d95cec.png"
              />
            ) : (
              <button trigger="click" className={cx('more-btn')}>
                <FontAwesomeIcon icon={faEllipsisVertical} />
              </button>
            )}
          </Menu>
        </div>
      </div>
    </header>
  );
}

export default Header;

*/

trong components/Layout/components/Header/Header.module.scss:
/*
.wrapper {
  --search-border-radius: 92px;
  --search-height: 46px;
  --search-top-spacer: 9px;
  --search-button-width: 52px;

  position: fixed;
  top: 0;
  left: 0;
  z-index: 10;
  display: flex;
  justify-content: center;
  width: 100%;
  height: var(--default-layout-header-height);
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  background-color: var(--White);
}

.inner {
  height: 100%;
  width: var(--default-layout-width-content);
  padding: 0 var(--default-layout-horizontal-spacer);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo-link {
  display: flex;
}

//Actions
.actions {
  display: flex;
  align-items: center;
}

.more-btn {
  font-size: 2rem;
  margin-left: 28px;
  padding: 4px 8px;
  background-color: transparent;
  cursor: pointer;
}

.action-btn {
  font-size: 2.2rem;
  color: #161823;
  background-color: transparent;
  padding: 4px 12px;
  cursor: pointer;
}

.user-avatar {
  width: 32px;
  height: 32px;
  object-fit: cover;
  border-radius: 50%;
  margin-left: 12px;
  cursor: pointer;
}

*/

Trong components/Layout/DefaultLayout.module.Scss:
/*
.wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.container {
  width: var(--default-layout-width-content);
  padding: 0 var(--default-layout-horizontal-spacer);
  margin-top: var(--default-layout-header-height);
  display: flex;
}

.content {
  flex: 1;
}

*/

Trong pages/Home/index.js
/*
function Home() {
  return <h2 style={{ height: 2000 }}>Home Page</h2>;
}

export default Home;

*/

Trong components/Propper/Menu/index.js
/*
import Tippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import MenuItem from './MenuItem';
import styles from './Menu.module.scss';
import Header from './Header';
import { useState } from 'react';

const cx = classNames.bind(styles);

const defaultFn = () => {};

function Menu({ children, items = [], hideOnClick = false, onChange = defaultFn }) {
  const [history, setHistory] = useState([{ data: items }]);
  const current = history[history.length - 1];

  const renderItems = () => {
    return current.data.map((item, index) => {
      const isParent = !!item.children;

      return (
        <MenuItem
          key={index}
          data={item}
          onClick={() => {
            if (isParent) {
              setHistory((prev) => [...prev, item.children]);
            } else {
              onChange(item);
            }
          }}
        />
      );
    });
  };

  return (
    <Tippy
      interactive
      delay={[0, 700]}
      offset={[12, 8]}
      hideOnClick={hideOnClick}
      placement="bottom-end"
      render={(attrs) => (
        <div className={cx('menu-list')} tabIndex="-1" {...attrs}>
          <PopperWrapper className={cx('menu-popper')}>
            {history.length > 1 && (
              <Header
                title="Language"
                onBack={() => {
                  setHistory((prev) => prev.slice(0, prev.length - 1));
                }}
              />
            )}
            <div className={cx('menu-body')}>{renderItems()}</div>
          </PopperWrapper>
        </div>
      )}
      onHide={() => setHistory((prev) => prev.slice(0, 1))}
    >
      {children}
    </Tippy>
  );
}

export default Menu;

*/

Trong components/Propper/Menu/Menu.module.scss
/*
//Menu wrapper
.menu-list {
  width: 224px;

  //Menu item
  .menu-item {
    margin-left: 0;
  }
}

.menu-popper {
  padding-bottom: 8px;
}

.menu-body {
  overflow-y: auto;
}

//Menu item
.menu-item {
  width: 100%;
  justify-content: flex-start;
  border-radius: 0;
  font-weight: 600;
  padding: 11px 16px;
  line-height: 1.8rem;

  &.separate {
    border-top: 1px solid rgba(22, 24, 35, 0.12);
  }
  s &:hover {
    background-color: rgba(22, 24, 35, 0.03);
  }
}

//Header language menu
.header {
  position: relative;
  flex-shrink: 0;
  height: 50px;
  margin-top: -8px;
}

.back-btn {
  width: 50px;
  height: 100%;
  background-color: transparent;
  cursor: pointer;
}

.header-title {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

*/

Trong components/Propper/Popper.module.scss
/*
.wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  max-height: min((100vh - 96px) - 60px, 734px);
  min-height: 100px;
  padding-top: 8px;
  border-radius: 8px;
  background: rgb(255, 255, 255);
  box-shadow: rgb(0 0 0 / 12%) 0px 2px 12px;
}

*/

Trong components/GlobalStyle/GlobalStyle.module.scss:
/*
@import 'normalize.css';

:root {
  --primary: #fe2c55;
  --black: #000;
  --White: #fff;
  --text-color: #161823;

  --font-family: 'ProximaNova', 'SofiaPro', sans-serif;

  //Default Layout
  --default-layout-header-height: 60px;
  --default-layout-width-content: 1150px;
  --default-layout-horizontal-spacer: 24px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: var(--font-family);
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
  color: var(--text-color);
  overflow-y: overlay;
}

//Scrollbar CSS
html *::-webkit-scrollbar {
  border-radius: 0;
  width: 8px;
}

html *::-webkit-scrollbar-thumb {
  border-radius: 4px;
  background-color: rgba(22, 24, 35, 0.06);
}

html *::-webkit-scrollbar-track {
  border-radius: 0;
  background-color: rgba(0, 0, 0, 0);
}

button,
input,
[tabindex] {
  outline: none;
  border: none;
}

a,
[href] {
  color: var(--text-color);
  text-decoration: none;
}

//Fonts emmbeded
@font-face {
  font-family: ProximaNova;
  src: url('/assets/fonts/Proxima-Nova-Regular.woff2');
  font-weight: 400;
}
@font-face {
  font-family: ProximaNova;
  src: url('/assets/fonts/ProximaNova-Semibold.woff2');
  font-weight: 600;
}
@font-face {
  font-family: SofiaPro;
  src: url('/assets/fonts/sofiapro-semibold.otf');
  font-weight: 600;
}
@font-face {
  font-family: ProximaNova;
  src: url('/assets/fonts/Proxima-Nova-Bold.woff2');
  font-weight: 700;
}
@font-face {
  font-family: SofiaPro;
  src: url('/assets/fonts/sofiapro-bold.woff2');
  font-weight: 700;
}

// Custom tippy tooltip
body {
  .tippy-box {
    border-radius: 8px;
    font-weight: 600;
    font-size: 1.6rem;
    line-height: 2.2rem;
    background-color: rgba(84, 84, 84, 0.92);
  }

  .tippy-arrow {
    color: rgba(84, 84, 84, 0.92);
  }

  .tippy-content {
    padding: 8px 9px;
  }

  .tippy-box[data-placement^='bottom'] > .tippy-arrow,
  before {
    top: -1px;
  }
}

*/

Trong file public/index.html
/*
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Web site created using create-react-app" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Tiktok - Make your day</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

*/

Trong components/Layout/components/Search/index.js:
/*
import { useEffect, useState, useRef } from 'react';
import { faCircleXmark, faSpinner } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import HeadlessTippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';

import * as searchService from '~/apiService/searchServices';
import { Wrapper as PopperWrapper } from '~/components/Popper';
import AccountItem from '~/components/AccountItem';
import { SearchIcon } from '~/components/Icons';
import { useDebounce } from '~/hook';
import styles from './Search.module.scss';

const cx = classNames.bind(styles);

function Search() {
  const [searchValue, setSearchValue] = useState('');

  const [searchResult, setSearchResult] = useState([]);

  const [showResult, setshowResult] = useState(true);
  const [loading, reloading] = useState(false);

  const debounced = useDebounce(searchValue, 800);

  const inputRef = useRef();

  useEffect(() => {
    if (!debounced.trim()) {
      setSearchResult([]);
      return;
    }

    const fetchApi = async () => {
      reloading(true);

      const result = await searchService.search(debounced);
      setSearchResult(result);

      reloading(false);
    };

    fetchApi();

    /*
    reloading(true);

    const fetchApi = async () => {
      try {
        const res = await request.get('users/search', {
          params: {
            q: debounced,
            type: 'less',
          },
        });
        setSearchResult(res.data);
        reloading(false);
      } catch (error) {
        reloading(false);
      }
    };

    fetchApi();*/
  }, [debounced]);

  /*fetch(`https://tiktok.fullstack.edu.vn/api/users/search?q=${encodeURIComponent(debounced)}&type=less`)
      .then((res) => res.json())
      .then((res) => {
        setSearchResult(res.data);
        reloading(false);
      })
      .catch(() => {
        reloading(false);
      });
  }, [debounced]);*/

  /*request
      .get('users/search', {
        params: {
          q: debounced,
          type: 'less',
        },
      })
      .then((res) => {
        setSearchResult(res.data);
        reloading(false);
      })
      .catch(() => {
        reloading(false);
      });
  }, [debounced]);*/

  const handleClear = () => {
    setSearchValue('');
    setSearchResult([]);
    inputRef.current.focus();
  };

  const handleHideResult = () => {
    setshowResult(false);
  };

  const handleChange = (e) => {
    const searchValue = e.target.value;

    if (!searchValue.startsWith(' ')) {
      setSearchValue(searchValue);
    }
  };

  return (
    //Using a wrapper <div> or <span> tag around the reference element solves this by creating a new parentNode context.
    <div>
      <HeadlessTippy
        interactive
        visible={showResult && searchResult.length > 0}
        render={(attrs) => (
          <div className={cx('search-result')} tabIndex="-1" {...attrs}>
            <PopperWrapper>
              <h4 className={cx('search-title')}>Accounts</h4>
              {searchResult.map((result) => (
                <AccountItem key={result.id} data={result} />
              ))}
            </PopperWrapper>
          </div>
        )}
        onClickOutside={handleHideResult}
      >
        <div className={cx('search')}>
          <input
            ref={inputRef}
            value={searchValue}
            placeholder="Search accounts and videos"
            spellCheck={false}
            onChange={handleChange}
            onFocus={() => setshowResult(true)}
          />

          {!!searchValue && !loading && (
            <button className={cx('clear-btn')} onClick={handleClear}>
              <FontAwesomeIcon icon={faCircleXmark} />
            </button>
          )}

          {loading && <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />}

          <button className={cx('search-btn')} onMouseDown={(e) => e.preventDefault()}>
            <SearchIcon />
          </button>
        </div>
      </HeadlessTippy>
    </div>
  );
}

export default Search;

*/

_________________________
Tái cấu trúc và tối ưu code #1
- apiService -> services
- src/components/Layout -> src/layouts
- routes config
- Tạo file env

trong src/config/index.js:
/*
import routes from './routes';

const config = {
  routes,
};
export default config;

*/

trong src/routes/index.js:
/*
import config from '~/config';

//Layout
import { HeaderOnly } from '~/layouts';

//Pages
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';
import Upload from '~/pages/Upload';
import Search from '~/pages/Search';

const publicRoutes = [
  { path: config.routes.home, component: Home },
  { path: config.routes.following, component: Following },
  { path: config.routes.profile, component: Profile },
  { path: config.routes.upload, component: Upload, layout: HeaderOnly },
  { path: config.routes.search, component: Search, layout: null },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };

*/

TRong thư mục gốc tạo file:
.env.development
/*
REACT_APP_BASE_URL= https://tiktok.fullstack.edu.vn/api/
*/

trong utils/httpRequest.js
/*
import axios from 'axios';

const httpRequest = axios.create({
  baseURL: process.env.REACT_APP_BASE_URL,
});

export const get = async (path, option = {}) => {
  const response = await httpRequest.get(path, option);
  return response.data;
};

export default httpRequest;

*/

___________________
Tái cấu trúc và tối ưu code #2
Tìm hiểu thư viện PropTypes
cách cài đặt: npm install --save prop-types
Áp dụng vào dự án:

Trong AcCountItem/index.js
/*
import PropTypes from 'prop-types';
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle } from '@fortawesome/free-solid-svg-icons';
import { Link } from 'react-router-dom';

import styles from './AccountItem.module.scss';
import Image from '~/components/Image';

const cx = classNames.bind(styles);

function AccountItem({ data }) {
  return (
    <Link to={`/:${data.nickname}`} className={cx('wrapper')}>
      <Image className={cx('avatar')} src={data.avatar} alt={data.full_name} />
      <div className={cx('info')}>
        <h4 className={cx('name')}>
          <span>{data.full_name}</span>
          {data.tick && <FontAwesomeIcon className={cx('check')} icon={faCheckCircle} />}
        </h4>
        <span className={cx('username')}>{data.nickname}</span>
      </div>
    </Link>
  );
}

AccountItem.propTypes = {
  data: PropTypes.object.isRequired,
};

export default AccountItem;
*/

Trong Button/index.js
/*
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';

import classNames from 'classnames/bind';
import styles from './Button.module.scss';

const cx = classNames.bind(styles);

function Button({
  to,
  href,
  primary = false,
  outline = false,
  text = false,
  rounded = false,
  disabled = false,
  small = false,
  large = false,
  children,
  className,
  leftIcon,
  rightIcon,
  onClick,
  ...passProps
}) {
  let Comp = 'button';

  const props = {
    onClick,
    ...passProps,
  };

  //Xóa lắng nghe sự kiện khi nút nhắn không hoạt động
  if (disabled) {
    Object.keys(props).forEach((key) => {
      if (key.startsWith('on') && typeof props[key] === 'function') {
        delete props[key];
      }
    });
  }

  if (to) {
    props.to = to;
    Comp = Link;
  } else if (href) {
    props.href = href;
    Comp = 'a';
  }

  const classes = cx('wrapper', {
    [className]: className,
    primary,
    outline,
    text,
    disabled,
    rounded,
    small,
    large,
  });

  return (
    <Comp className={classes} {...props}>
      {leftIcon && <span className={cx('icon')}>{leftIcon}</span>}
      <span className={cx('title')}>{children}</span>
      {rightIcon && <span className={cx('icon')}>{rightIcon}</span>}
    </Comp>
  );
}

Button.propTypes = {
  to: PropTypes.string,
  href: PropTypes.string,
  primary: PropTypes.bool,
  outline: PropTypes.bool,
  text: PropTypes.bool,
  rounded: PropTypes.bool,
  disabled: PropTypes.bool,
  small: PropTypes.bool,
  large: PropTypes.bool,
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  leftIcon: PropTypes.node,
  rightIcon: PropTypes.node,
  onClick: PropTypes.func,
};

export default Button;

*/

Trong GlobalStyle/index.js
/*
import PropTypes from 'prop-types';
import './GlobalStyles.scss';

function GlobalStyle({ children }) {
  return children;
}

GlobalStyle.PropTypes = {
  children: PropTypes.node.isRequired,
};

export default GlobalStyle;

*/

Trong components/Icons/index.js:
/*
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { useState, forwardRef } from 'react';
import images from '~/assets/images';
import styles from './Image.module.scss';

const Image = forwardRef(({ src, alt, className, fallback: customFallback = images.noImage, ...props }, ref) => {
  const [fallback, setFallback] = useState('');

  const handleError = () => {
    setFallback(customFallback);
  };

  return (
    <img
      className={classNames(styles.wrapper, className)}
      ref={ref}
      src={fallback || src}
      alt={alt}
      {...props}
      onError={handleError}
    />
  );
});

Image.propTypes = {
  src: PropTypes.string,
  alt: PropTypes.string,
  className: PropTypes.string,
  fallback: PropTypes.string,
};

export default Image;

*/

Trong Popper/Wrapper.js
/*
import PropTypes from 'prop-types';
import classNames from 'classnames/bind';

import styles from './Popper.module.scss';

const cx = classNames.bind(styles);

function Wrapper({ children, className }) {
  return <div className={cx('wrapper', className)}>{children}</div>;
}

Wrapper.propTypes = {
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
};

export default Wrapper;

*/

Trong Propper/Menu/Header.js
/*
import classNames from 'classnames/bind';
import PropTypes from 'prop-types';

import styles from './Menu.module.scss';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChevronLeft } from '@fortawesome/free-solid-svg-icons';

const cx = classNames.bind(styles);

function Header({ title, onBack }) {
  return (
    <header className={cx('header')}>
      <button className={cx('back-btn')} onClick={onBack}>
        <FontAwesomeIcon icon={faChevronLeft} />
      </button>
      <h4 className={cx('header-title')}>{title}</h4>
    </header>
  );
}

Header.propTypes = {
  title: PropTypes.string.isRequired,
  onBack: PropTypes.func.isRequired,
};

export default Header;

*/

Menu/index.js
/*
import Tippy from '@tippyjs/react/headless';
import classNames from 'classnames/bind';
import PropTypes from 'prop-types';

import { Wrapper as PopperWrapper } from '~/components/Popper';
import MenuItem from './MenuItem';
import styles from './Menu.module.scss';
import Header from './Header';
import { useState } from 'react';

const cx = classNames.bind(styles);

const defaultFn = () => {};

function Menu({ children, items = [], hideOnClick = false, onChange = defaultFn }) {
  const [history, setHistory] = useState([{ data: items }]);
  const current = history[history.length - 1];

  const renderItems = () => {
    return current.data.map((item, index) => {
      const isParent = !!item.children;

      return (
        <MenuItem
          key={index}
          data={item}
          onClick={() => {
            if (isParent) {
              setHistory((prev) => [...prev, item.children]);
            } else {
              onChange(item);
            }
          }}
        />
      );
    });
  };

  return (
    <Tippy
      interactive
      delay={[0, 700]}
      offset={[12, 8]}
      hideOnClick={hideOnClick}
      placement="bottom-end"
      render={(attrs) => (
        <div className={cx('menu-list')} tabIndex="-1" {...attrs}>
          <PopperWrapper className={cx('menu-popper')}>
            {history.length > 1 && (
              <Header
                title="Language"
                onBack={() => {
                  setHistory((prev) => prev.slice(0, prev.length - 1));
                }}
              />
            )}
            <div className={cx('menu-body')}>{renderItems()}</div>
          </PopperWrapper>
        </div>
      )}
      onHide={() => setHistory((prev) => prev.slice(0, 1))}
    >
      {children}
    </Tippy>
  );
}

Menu.propTypes = {
  children: PropTypes.node.isRequired,
  items: PropTypes.array,
  hideOnClick: PropTypes.bool,
  onChange: PropTypes.func,
};

export default Menu;

*/

Trong Menu/MenuItem.js
/*
import PropTypes from 'prop-types';
import Button from '~/components/Button';
import classNames from 'classnames/bind';
import styles from './Menu.module.scss';

const cx = classNames.bind(styles);

function MenuItem({ data, onClick }) {
  const classes = cx('menu-item', {
    separate: data.separate,
  });

  return (
    <Button className={classes} leftIcon={data.icon} to={data.to} onClick={onClick}>
      {data.title}
    </Button>
  );
}

MenuItem.propTypes = {
  data: PropTypes.object.isRequired,
  onClick: PropTypes.func,
};

export default MenuItem;

/*

DefaultLayout/index.js
/*
import classNames from 'classnames/bind';
import PropTypes from 'prop-types';

import Header from '~/layouts/components/Header';
import styles from './DefaultLayout.module.scss';
import Sidebar from './Sidebar';

const cx = classNames.bind(styles);

function DefaultLayout({ children }) {
  return (
    <div className={cx('wrapper')}>
      <Header />
      <div className={cx('container')}>
        <Sidebar />
        <div className={cx('content')}>{children}</div>
      </div>
    </div>
  );
}

DefaultLayout.propTypes = {
  children: PropTypes.node.isRequired,
};

export default DefaultLayout;

*/
___________________
Tối Ưu file index trong dự án 
đổi tên file trung w thư mục và thêm 1 file index để export default ra