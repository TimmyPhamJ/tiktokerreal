const { useBabelRc } = require("customize-cra")

1. cài đặt customize-cra
npm i customize-cra react-app-rewired -D
đổi trong package.json
/*
"scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",
    "eject": "react-app-rewired eject"
  },
*/
2. Tạo file config-overrides.js ngoài dự án gốc copy đoạn dưới vào file.

/* config-overrides.js 
module.exports = function override(config, env) {
    //do stuff with the webpack config...
    return config;
};
*/
_________________________
3. Cài đặt babel-plugin-module-resolver: npm install --save-dev babel-plugin-module-resolver
Tạo 1 file .babelrc tại thư mục gốc
/*
{
  "plugins": [
    [
      "module-resolver",
      {
        "alias": {
          "~": "./src"
        }
      }
    ]
  ]
}

 */

 4. Taoj 1 file jsconfig.json có nội dung:
 /*
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["src/*"]
    }
  }
}

 */

5. tìm customize-cra babel sau đó tìm tới tab useBabelRc. sau đó vào file config-overrides.js làm theo cú pháp sau:
/*
const { override,useBabelRc } = require("customize-cra");

module.exports = override(
    useBabelRc()
);
 */
 ______________________________
 CÀI ĐẶT VÀ CẤU HÌNH PRETTIER: Giúp format các file code HTML,CSS,JS,...giúp code trở nên gọn gàn hơn và ngay ngắn hơn 
 1. thêm 1 file cấu hình .prettierrc  vào thu mục gốc:
 /*
{
    "arrowParens": "always",
    "bracketSameLine": false,
    "bracketSpacing": true,
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "css",
    "insertPragma": false,
    "jsxSingleQuote": false,
    "printWidth": 120,
    "proseWrap": "preserve",
    "quoteProps": "as-needed",
    "requirePragma": false,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 4,
    "trailingComma": "all",
    "useTabs": false,
    "vueIndentScriptAndStyle": false
}
 */
 2. tạo file .vscode/settings.json
 /*
 {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
}
 */
 ______________________________
 CẤU HÌNH VÀ SỬ DỤNG CSS/SASS

 1. Tạo GlobalStyle component
 tạo file index. js và GlobalStyle.scss
 sau do import GlobalStyle vào file index.js ngoài src và app = <GlobalStyle> </GlobalStyle> bằng cách bôi den APP ctrl + p chọn wrap enter rồi nhạp then GlobalStyle và enter là ok 

 2. Cài thư viện SASS: 'npm i -D sass'

 3. Reset CSS
 dùng thư viện reset css normalize npm trên google
 "npm install --save normalize.css"

 4. Default CSS: font-family, font-size,line-height

 BỔ SUNG THUỘC TÍNH CSS

 1. Mở file GlobalStyle lên. Thêm * {box-sizing = border-box} 
 
 _________________________________

 CẤU HÌNH ROUTER/LAYOUT CHO DỰ ÁN

  1. Phân tịch tổng quan LAYOUT



  2. Cài đặt React-router-dom: npm i react-router-dom



  3. Đưa cấu hình router ra ngoài
import {BrowserRouter as Router} from 'react-router-dom'; vào file App.js. add trang home và following vào
/*
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from '~/pages/Home';
import Following from '~/pages/Following';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/following" element={<Following />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;
*/

taọ thư mục routers có index.js:
/*
const publicRoutes =[
dùng cho những router không cần đăng nhập vẫn xem được
]

const privateRoutes =[
    phải đang nhập mới xem được nếu không đăng nhập sẽ lái sang trang login
]

export{publicRoutes,privateRoutes}
*/

Chuyển import hom và foloowing sang traing index.js của routes sau đó làm như sau:

*/

taọ thư mục routers có index.js:
/*
import Home from '~/pages/Home';
import Following from '~/pages/Following';

const publicRoutes = [
  { path: '/', component: Home },
  { path: '/following', component: Following },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };

*/

chuyển sang trang App.js đổi lại như sau:

/*
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route) => {
            return <Route />;
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

*/

Sau này nếu có thêm 1 trang khác vào thì vào pages tạo thêm 1 trang. sau đó vào routes nạp trang mới vào 

  4. Xây dựng cơ chế tải layout 

  tại thư mục component tạo 1 thư mục tên là Layout tạo trong thư mục Layout 1 thư mục khác là DefaultLayout và trong thư mục đó tạo 1 index.js. 
  Thư mục Layout này sau này có thể thêm các layout khác thì chứa chung với thư mục default. 
  Trong defaultlayout thì chỉ thiết kế các nội dung đứng yên và khoogn di chuyển dù là có chuyển trang gọi là layout cố định.
  Tại DefaultLayout tạo thư mục Header và thêm 1 file index.js trong đó sau đó nhân lên các mục cần làm như header, sidebar, footer,...
  tại index.js của defaultlayout import ra:
  /*
  import Header from './Header';
import Sidebar from './Sidebar';

function DefaultLayout({ children }) {
  return (
    <div>
      <Header />
      <div className="container">
        <Sidebar />
        <div className="content">{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;
  */

  tại thư mục layout tạo 1 file index.js

  /*
export {default as DefaultLayout} form './DefaultLayout'
  */

  sang file APP.js import layout vào:
  /*
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';
import { DefaultLayout } from '~/components/Layout';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route, index) => {
            const Layout = route.layout || DefaultLayout;
            const Page = route.component;
            return (
              <Route
                key={index}
                path={route.path}
                element={
                  <Layout>
                    <Page />
                  </Layout>
                }
              />
            );
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

  */

nếu tại index.js của route mà không chỉ định layout:
/*
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';

const publicRoutes = [
  { path: '/', component: Home }, mạc định là DefaultLayout
  { path: '/following', component: Following }, mạc định là DefaultLayout
  { path: '/profile', component: Profile, nếu (layout: )},
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };

*/

đối voái các trang 1 mình  1 layout chúng ta sẽ k để DefaultLayout ăn vào layout đó thì:
tạo 1 trang upload trong pages.
cấu hình route cho trang mới:
/*
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';
import Upload from '~/pages/Upload';

const publicRoutes = [
  { path: '/', component: Home },
  { path: '/following', component: Following },
  { path: '/profile', component: Profile },
  { path: '/upload', component: Upload, layout: null },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };
*/

tại APP.js:

/*
import { Fragment } from 'react';

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';
import { DefaultLayout } from '~/components/Layout';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route, index) => {
            const Layout = route.layout === null ? Fragment : DefaultLayout;
            const Page = route.component;
            return (
              <Route
                key={index}
                path={route.path}
                element={
                  <Layout>
                    <Page />
                  </Layout>
                }
              />
            );
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

*/

Trong up load vẫn có header:

Cách 1:
vào trang Upload 
/*
import Header from '~/components/Layout/DefaultLayout/Header';

function Upload() {
  return (
    <div>
      <Header />
      <div className="content">
        <h2>Upload Page</h2>
      </div>
    </div>
  );
}

export default Upload;

*/

Cách 2:
Tạo 1 cái layout mới
vào Layout tạo 1 cái HeaderOnly
Trong index.js của Layout:
/*
export { default as DefaultLayout } from './DefaultLayout';
export { default as HeaderOnly } from './HeaderOnly';

*/

trong route:
/*
//Layout
import { HeaderOnly } from '~/components/Layout';

//Pages
import Home from '~/pages/Home';
import Following from '~/pages/Following';
import Profile from '~/pages/Profile';
import Upload from '~/pages/Upload';
import Search from '~/pages/Search';

const publicRoutes = [
  { path: '/', component: Home },
  { path: '/following', component: Following },
  { path: '/profile', component: Profile },
  { path: '/upload', component: Upload, layout: HeaderOnly },
  { path: '/search', component: Search, layout: null },
];

const privateRoutes = [];

export { publicRoutes, privateRoutes };


*/

trong trang App.js:
/*
import { Fragment } from 'react';

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { publicRoutes } from '~/routes';
import { DefaultLayout } from '~/components/Layout';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          {publicRoutes.map((route, index) => {
            const Page = route.component;

            let Layout = DefaultLayout;

            if (route.layout) {
              Layout = route.layout;
            } else if (route.layout === null) {
              Layout = Fragment;
            }

            return (
              <Route
                key={index}
                path={route.path}
                element={
                  <Layout>
                    <Page />
                  </Layout>
                }
              />
            );
          })}
        </Routes>
      </div>
    </Router>
  );
}

export default App;

*/

trường hợp trùng 02 thư mục Header:
vào layout tạo thư mục components sau đó vào DefaultLayout cắt Header cắt lên components.
sau đó vào index của DefaultLayout sửa lại:
/*
import Header from '~/components/Layout/components/Header';
import Sidebar from './Sidebar';

function DefaultLayout({ children }) {
  return (
    <div>
      <Header />
      <div className="container">
        <Sidebar />
        <div className="content">{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;

*/

xóa bỏ header trong HeaderOnly sau đó vào index.js của HeaderOnly:
/*
import Header from '~/components/Layout/components/Header';

function DefaultLayout({ children }) {
  return (
    <div>
      <Header />
      <div className="container">
        <div className="content">{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;
*/

____________________________________

DỰNG KHUNG LAYOUT MẶC ĐỊNH

Vào component/Layout/components/Header tạo file Header.module.scss
Sau đó import vào index.js của Header.

đi cài thư viện classnames: npm i classnames.
sau đó import classnames vào trong index.js của Header:

trong index.js của Header
/*
import classNames from 'classnames/bind';

import styles from './Header.module.scss';

const cx = classNames.bind(styles);

function Header() {
  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}></div>
    </header>
  );
}

export default Header;


*/

trong Header.module.scss
/*
.wrapper {
  width: 100%;
  height: 60px;
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: 1150px;
  background-color: #ccc;
}


*/

sang GlobalStyles.scss:
/*
@import 'normalize.css';

@import url('https://fonts.googleapis.com/css2?family=Mitr:wght@300;400;500;600;700&display=swap');

:root {
  --primary: #fe2c55;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Mitr', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
}

*/

vào DefaultLayout tạo file DefaultLayout.module.scss 

chỉnh trong index.js - DefaultLayout:
/*
import classNames from 'classnames/bind';

import Header from '~/components/Layout/components/Header';
import styles from './DefaultLayout.module.scss';
import Sidebar from './Sidebar';

const cx = classNames.bind(styles);

function DefaultLayout({ children }) {
  return (
    <div className={cx('wrapper')}>
      <Header />
      <div className={cx('container')}>
        <Sidebar />
        <div className={cx('content')}>{children}</div>
      </div>
    </div>
  );
}

export default DefaultLayout;

*/

trong DefaultLayout.module.scss 
/*
.wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.container {
  width: 1150px;
}

*/

làm sang Sidebar tạo file Sidebar.module.scss

trong index.js Sidebar
/*
import classNames from 'classnames/bind';

import styles from './Sidebar.module.scss';

const cx = classNames.bind(styles);

function Sidebar() {
  return <aside className={cx('wrapper')}>
    <h2>Sidebar</h2>
  </aside>;
}

export default Sidebar;

*/

trong Sidebar.module.scss
/*
.wrapper {
  width: 356px;
}

*/
__________________________________________
Xây dựng UI phần Header #1


Taọ thư mục asset - images - file index.js và logo.svg.

trong index.js - images:
/*
const images = {
  logo: require('~/assets/images/logo.svg'),
};
export default images;

*/
thay đổi trong file GlobalStyles.scss:
/*
@import 'normalize.css';

@import url('https://fonts.googleapis.com/css2?family=Mitr:wght@300;400;500;600;700&display=swap');

:root {
  --primary: #fe2c55;
  --black: #000;
  --text-color: #333;

  //Default Layout
  --default-layout-header-height: 60px;
  --default-layout-width-content: 1150px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Mitr', sans-serif;
  font-size: 1.6rem;
  line-height: 1.5;
  text-rendering: optimizeSpeed; //tối ưu để hiển thị font nhanh nhất
  color: var(--text-color);
}

button,
input,
[tabindex] {
  outline: none;
  border: none;
}

a [href] {
  color: var(--text-color);
  text-decoration: none;
}

*/

Thay đổi trong index.js Header:
/*
import classNames from 'classnames/bind';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleXmark, faMagnifyingGlass, faSpinner } from '@fortawesome/free-solid-svg-icons';

import styles from './Header.module.scss';

import images from '~/assets/images';

const cx = classNames.bind(styles);

function Header() {
  return (
    <header className={cx('wrapper')}>
      <div className={cx('inner')}>
        <div className={cx('logo')}>
          <img src={images.logo} alt="TikTok" />
        </div>
        <div className={cx('search')}>
          <input placeholder="Search accounts and videos" spellCheck={false} />
          <button className={cx('clear-btn')}>
            <FontAwesomeIcon icon={faCircleXmark} />
          </button>
          <FontAwesomeIcon className={cx('loading')} icon={faSpinner} />
          <button className={cx('search-btn')}>
            <FontAwesomeIcon icon={faMagnifyingGlass} />
          </button>
        </div>
        <div className={cx('actions')}></div>
      </div>
    </header>
  );
}

export default Header;

*/

Thay đổi trong Header.module.scss:
/*
.wrapper {
  --search-border-radius: 92px;
  --search-height: 46px;
  --search-top-spacer: 9px;
  --search-button-width: 52px;

  width: 100%;
  height: var(--default-layout-header-height, 60px);
  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%);
  display: flex;
  justify-content: center;
}

.inner {
  height: 100%;
  width: var(--default-layout-width-content);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
}

.search {
  position: relative;
  width: 361px;
  height: var(--search-height);
  padding-left: 16px;
  display: flex;
  background-color: rgba(22, 24, 35, 0.06);
  border-radius: var(--search-border-radius);
  border: 1.5px solid transparent;

  input {
    flex: 1;
    height: 100%;
    color: var(--black);
    font-size: 1.6rem;
    caret-color: var(--primary);
    background-color: transparent;
  }

  input:not(:placeholder-shown) ~ .search-btn {
    color: rgba(22, 24, 35, 0.75);
  }

  &::after {
    content: '';
    position: absolute;
    top: var(--search-top-spacer);
    right: var(--search-button-width);
    height: calc(var(--search-height) - var(--search-top-spacer) * 2);
    width: 1px;
    background-color: rgba(22, 24, 35, 0.12);
  }

  &:focus-within {
    border-color: rgba(22, 24, 35, 0.2);
  }
}

.clear-btn,
.loading {
  position: absolute;
  right: calc(var(--search-button-width) + 16px);
  top: 50%;
  transform: translateY(-50%);
  color: rgba(22, 24, 35, 0.34);
}

.search-btn {
  width: var(--search-button-width);
  height: 100%;
  border-top-right-radius: var(--search-border-radius);
  border-bottom-right-radius: var(--search-border-radius);
  font-size: 1.8rem;
  color: rgba(22, 24, 35, 0.34);

  &:hover {
    cursor: pointer;
    background-color: rgba(22, 24, 35, 0.03);
  }

  &:active {
    background-color: rgba(22, 24, 35, 0.06);
  }
}

*/